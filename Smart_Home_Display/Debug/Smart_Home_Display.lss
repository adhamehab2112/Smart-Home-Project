
Smart_Home_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002c06  00002c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800082  00800082  00002cbc  2**0
                  ALLOC
  3 .stab         000036b4  00000000  00000000  00002cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b15  00000000  00000000  00006370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ba18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__vector_2>
       c:	0c 94 07 08 	jmp	0x100e	; 0x100e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 14 	call	0x28e2	; 0x28e2 <main>
      8a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MWDT_voidEnable>:

#include "MWDT_private.h"
#include "MWDT_interface.h"

void MWDT_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MWDT_voidDisable>:
void MWDT_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	WDTCR = (1<<WDTCR_WDTOE) | (1<<WDTCR_WDE);
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24
	WDTCR = 0;
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MWDT_u8Sleep>:
void MWDT_u8Sleep(u8 Copy_u8SleepTime)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SleepTime < 8)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	78 f4       	brcc	.+30     	; 0xbae <MWDT_u8Sleep+0x30>
	{
		WDTCR &= 0b11111000;
     b90:	a1 e4       	ldi	r26, 0x41	; 65
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e1 e4       	ldi	r30, 0x41	; 65
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 7f       	andi	r24, 0xF8	; 248
     b9c:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepTime;
     b9e:	a1 e4       	ldi	r26, 0x41	; 65
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e1 e4       	ldi	r30, 0x41	; 65
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	90 81       	ld	r25, Z
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	89 2b       	or	r24, r25
     bac:	8c 93       	st	X, r24
	}
}
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <MUART_voidInit>:
#include "MUART_config.h"
#include "MUART_private.h"
#include "MUART_interface.h"

void MUART_voidInit(void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62

	/* Configure Baud Rate
	 * BaudRate -> 9600/8MhZ*/
	UBRRL = 51;
     bbe:	e9 e2       	ldi	r30, 0x29	; 41
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	83 e3       	ldi	r24, 0x33	; 51
     bc4:	80 83       	st	Z, r24
	/*Configure Frame Format
	 * 8 data, 1 stop, No Parity*/
	UCSRC =  UCSRC | (UCSRC << 7) | (UCSRC << 2)| (UCSRC << 1); //0x86;
     bc6:	a0 e4       	ldi	r26, 0x40	; 64
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	28 2f       	mov	r18, r24
     bd2:	e0 e4       	ldi	r30, 0x40	; 64
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	96 95       	lsr	r25
     bde:	98 2f       	mov	r25, r24
     be0:	88 27       	eor	r24, r24
     be2:	97 95       	ror	r25
     be4:	87 95       	ror	r24
     be6:	28 2b       	or	r18, r24
     be8:	e0 e4       	ldi	r30, 0x40	; 64
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	28 2b       	or	r18, r24
     bfc:	e0 e4       	ldi	r30, 0x40	; 64
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	82 2b       	or	r24, r18
     c0c:	8c 93       	st	X, r24
	// Enable RX
	SET_BIT(UCSRB, 4);
     c0e:	aa e2       	ldi	r26, 0x2A	; 42
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ea e2       	ldi	r30, 0x2A	; 42
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 61       	ori	r24, 0x10	; 16
     c1a:	8c 93       	st	X, r24
	SET_BIT(UCSRB, 3);
     c1c:	aa e2       	ldi	r26, 0x2A	; 42
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	ea e2       	ldi	r30, 0x2A	; 42
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	88 60       	ori	r24, 0x08	; 8
     c28:	8c 93       	st	X, r24
}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <MUART_voidSendChar>:

void MUART_voidSendChar(u8 Copy_u8Data)
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	0f 92       	push	r0
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	89 83       	std	Y+1, r24	; 0x01

	while(0 == GET_BIT(UCSRA,5))
     c3c:	eb e2       	ldi	r30, 0x2B	; 43
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	80 72       	andi	r24, 0x20	; 32
     c48:	90 70       	andi	r25, 0x00	; 0
     c4a:	95 95       	asr	r25
     c4c:	87 95       	ror	r24
     c4e:	95 95       	asr	r25
     c50:	87 95       	ror	r24
     c52:	95 95       	asr	r25
     c54:	87 95       	ror	r24
     c56:	95 95       	asr	r25
     c58:	87 95       	ror	r24
     c5a:	95 95       	asr	r25
     c5c:	87 95       	ror	r24
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	69 f3       	breq	.-38     	; 0xc3c <MUART_voidSendChar+0xc>
	{
		// Wait until transmission Register Empty
		// UDRE = 1 USART Data Register Empty and ready to be written
	}
	// write data to Data Register
	UDR = Copy_u8Data;
     c62:	ec e2       	ldi	r30, 0x2C	; 44
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	80 83       	st	Z, r24
}
     c6a:	0f 90       	pop	r0
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <MUART_voidSendString>:

void MUART_voidSendString(char *Copy_u8String)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	00 d0       	rcall	.+0      	; 0xc78 <MUART_voidSendString+0x6>
     c78:	0f 92       	push	r0
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	9b 83       	std	Y+3, r25	; 0x03
     c80:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_u8Char = 0;
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	0e c0       	rjmp	.+28     	; 0xca2 <MUART_voidSendString+0x30>
	while(Copy_u8String[loc_u8Char] != '\0')
	{
		MUART_voidSendChar(Copy_u8String[loc_u8Char]);
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	9b 81       	ldd	r25, Y+3	; 0x03
     c90:	fc 01       	movw	r30, r24
     c92:	e2 0f       	add	r30, r18
     c94:	f3 1f       	adc	r31, r19
     c96:	80 81       	ld	r24, Z
     c98:	0e 94 18 06 	call	0xc30	; 0xc30 <MUART_voidSendChar>
		loc_u8Char++;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	89 83       	std	Y+1, r24	; 0x01
}

void MUART_voidSendString(char *Copy_u8String)
{
	u8 loc_u8Char = 0;
	while(Copy_u8String[loc_u8Char] != '\0')
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	fc 01       	movw	r30, r24
     cae:	e2 0f       	add	r30, r18
     cb0:	f3 1f       	adc	r31, r19
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	39 f7       	brne	.-50     	; 0xc86 <MUART_voidSendString+0x14>
	{
		MUART_voidSendChar(Copy_u8String[loc_u8Char]);
		loc_u8Char++;
	}

}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <MUART_u8GetChar>:

u8 MUART_u8GetChar(void)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Result;

	while(0 == GET_BIT(UCSRA,7))
     cce:	eb e2       	ldi	r30, 0x2B	; 43
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	88 1f       	adc	r24, r24
     cd6:	88 27       	eor	r24, r24
     cd8:	88 1f       	adc	r24, r24
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	90 70       	andi	r25, 0x00	; 0
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	a9 f3       	breq	.-22     	; 0xcce <MUART_u8GetChar+0xa>
	{
		// Wait until Reception Complete
	}
	local_u8Result = UDR;
     ce4:	ec e2       	ldi	r30, 0x2C	; 44
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	89 83       	std	Y+1, r24	; 0x01

	/* Clear Flag */
	SET_BIT(UCSRA,7);
     cec:	ab e2       	ldi	r26, 0x2B	; 43
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	eb e2       	ldi	r30, 0x2B	; 43
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	8c 93       	st	X, r24

	return local_u8Result;
     cfa:	89 81       	ldd	r24, Y+1	; 0x01

}
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <MTIMER0_voidInit>:

void (*MTIMER0_PtrFun)(void);
void (*MTIMER1_PtrFun)(void);

void MTIMER0_voidInit(void)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = TIMER0_COM | MTIMER0_WGM  | MTIMER0_CS;
     d0c:	e3 e5       	ldi	r30, 0x53	; 83
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	85 e0       	ldi	r24, 0x05	; 5
     d12:	80 83       	st	Z, r24
	SET_BIT(TIMSK,0); /*Enable OV Interrupt*/
     d14:	a9 e5       	ldi	r26, 0x59	; 89
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e9 e5       	ldi	r30, 0x59	; 89
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	81 60       	ori	r24, 0x01	; 1
     d20:	8c 93       	st	X, r24
}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <MTIMER0_voidSetOV_Value>:

void MTIMER0_voidSetOV_Value(u8 Copy_u8Value)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	0f 92       	push	r0
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 256 - Copy_u8Value;
     d34:	e2 e5       	ldi	r30, 0x52	; 82
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	81 95       	neg	r24
     d3c:	80 83       	st	Z, r24
}
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <MTIMER0_voidSetCTC_Value>:

void MTIMER0_voidSetCTC_Value(u8 Copy_u8Value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
     d52:	ec e5       	ldi	r30, 0x5C	; 92
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	80 83       	st	Z, r24
}
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <MTIMER0_voidSetCallback>:

void MTIMER0_voidSetCallback(void (* PtrFun)(void))
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <MTIMER0_voidSetCallback+0x6>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_PtrFun = PtrFun;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	90 93 83 00 	sts	0x0083, r25
     d78:	80 93 82 00 	sts	0x0082, r24
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <__vector_10>:

/*Time0 CTC Interrupt*/
void __vector_10(void)
{
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	11 24       	eor	r1, r1
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	4f 93       	push	r20
     d96:	5f 93       	push	r21
     d98:	6f 93       	push	r22
     d9a:	7f 93       	push	r23
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_PtrFun();
     db0:	e0 91 82 00 	lds	r30, 0x0082
     db4:	f0 91 83 00 	lds	r31, 0x0083
     db8:	09 95       	icall
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <MTIMER1_voidInit>:
//	MTIMER0_PtrFun();
//}
/********************** Timer 1 ******************************/

void MTIMER1_voidInit(void)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
	/*Select FAST_PWM Mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     de8:	af e4       	ldi	r26, 0x4F	; 79
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ef e4       	ldi	r30, 0x4F	; 79
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8e 7f       	andi	r24, 0xFE	; 254
     df4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
     df6:	af e4       	ldi	r26, 0x4F	; 79
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ef e4       	ldi	r30, 0x4F	; 79
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	82 60       	ori	r24, 0x02	; 2
     e02:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
     e04:	ae e4       	ldi	r26, 0x4E	; 78
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	ee e4       	ldi	r30, 0x4E	; 78
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 60       	ori	r24, 0x08	; 8
     e10:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
     e12:	ae e4       	ldi	r26, 0x4E	; 78
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	ee e4       	ldi	r30, 0x4E	; 78
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 61       	ori	r24, 0x10	; 16
     e1e:	8c 93       	st	X, r24

	/*Clear channel B1 when up counting*/
	CLR_BIT(TCCR1A,TCCR1A_COM1B0);
     e20:	af e4       	ldi	r26, 0x4F	; 79
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ef e4       	ldi	r30, 0x4F	; 79
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 7e       	andi	r24, 0xEF	; 239
     e2c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
     e2e:	af e4       	ldi	r26, 0x4F	; 79
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ef e4       	ldi	r30, 0x4F	; 79
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 62       	ori	r24, 0x20	; 32
     e3a:	8c 93       	st	X, r24

	/*Setting the prescaler 64 (the clock)*/
	SET_BIT(TCCR1B,TCCR1B_CS10);
     e3c:	ae e4       	ldi	r26, 0x4E	; 78
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ee e4       	ldi	r30, 0x4E	; 78
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	81 60       	ori	r24, 0x01	; 1
     e48:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
     e4a:	ae e4       	ldi	r26, 0x4E	; 78
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ee e4       	ldi	r30, 0x4E	; 78
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	82 60       	ori	r24, 0x02	; 2
     e56:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
     e58:	ae e4       	ldi	r26, 0x4E	; 78
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ee e4       	ldi	r30, 0x4E	; 78
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8b 7f       	andi	r24, 0xFB	; 251
     e64:	8c 93       	st	X, r24

	/*TCCR1A_COM1B0 */
	SET_BIT(TCCR1A, TCCR1A_FOC1B);
     e66:	af e4       	ldi	r26, 0x4F	; 79
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ef e4       	ldi	r30, 0x4F	; 79
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	84 60       	ori	r24, 0x04	; 4
     e72:	8c 93       	st	X, r24

	ICR1 = 2500;
     e74:	e6 e4       	ldi	r30, 0x46	; 70
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	84 ec       	ldi	r24, 0xC4	; 196
     e7a:	99 e0       	ldi	r25, 0x09	; 9
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
}
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <MTIMER1_voidSetOV>:

void MTIMER1_voidSetOV(u16 Copy_u16OV)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <MTIMER1_voidSetOV+0x6>
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
	TCNT1= 65536 - Copy_u16OV;
     e94:	ec e4       	ldi	r30, 0x4C	; 76
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	90 95       	com	r25
     e9e:	81 95       	neg	r24
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	80 83       	st	Z, r24
}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <MTIMER1_voidSetICR1>:

void MTIMER1_voidSetICR1(u16 Copy_u16TOP)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <MTIMER1_voidSetICR1+0x6>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
	ICR1= Copy_u16TOP;
     ebe:	e6 e4       	ldi	r30, 0x46	; 70
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	80 83       	st	Z, r24
}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <MTIMER1_voidSetCTC>:

void MTIMER1_voidSetCTC(u16 Copy_u16Value)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <MTIMER1_voidSetCTC+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16Value;
     ee2:	ea e4       	ldi	r30, 0x4A	; 74
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <MTIMER1_voidSetFastPWM_Value>:

void MTIMER1_voidSetFastPWM_Value(u16 Copy_u16Value)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <MTIMER1_voidSetFastPWM_Value+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16Value;
     f06:	e8 e4       	ldi	r30, 0x48	; 72
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	91 83       	std	Z+1, r25	; 0x01
     f10:	80 83       	st	Z, r24
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <MGIE_voidEnable>:

#include "MGINTR_private.h"
#include "MGINTR_interface.h"

void MGIE_voidEnable ()
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
     f24:	af e5       	ldi	r26, 0x5F	; 95
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ef e5       	ldi	r30, 0x5F	; 95
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	8c 93       	st	X, r24
}
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <MGIE_voidDisable>:

void MGIE_voidDisable ()
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
     f40:	af e5       	ldi	r26, 0x5F	; 95
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ef e5       	ldi	r30, 0x5F	; 95
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8f 77       	andi	r24, 0x7F	; 127
     f4c:	8c 93       	st	X, r24
}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <MEXTI_voidINT0>:
#include "MEXTI_interface.h"

#include "MEXTI_private.h"

void MEXTI_voidINT0 (void)
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	/*Enable External Interrupt 1*/
	SET_BIT(GICR, INT0);
     f5c:	ab e5       	ldi	r26, 0x5B	; 91
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	eb e5       	ldi	r30, 0x5B	; 91
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	8c 93       	st	X, r24

	/*Configure Control External Interrupt 1 Sense*/
	/*Falling Edge ONE & Zero*/
	SET_BIT(MCUCR, ISC01);
     f6a:	a5 e5       	ldi	r26, 0x55	; 85
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e5       	ldi	r30, 0x55	; 85
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	82 60       	ori	r24, 0x02	; 2
     f76:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, ISC00);
     f78:	a5 e5       	ldi	r26, 0x55	; 85
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e5       	ldi	r30, 0x55	; 85
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8e 7f       	andi	r24, 0xFE	; 254
     f84:	8c 93       	st	X, r24
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <MEXTI_voidINT1>:

void MEXTI_voidINT1 (void)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	/*Enable External Interrupt 1*/
	SET_BIT(GICR, INT1);
     f94:	ab e5       	ldi	r26, 0x5B	; 91
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	eb e5       	ldi	r30, 0x5B	; 91
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	8c 93       	st	X, r24

	/*Configure Control External Interrupt 1 Sense*/
	/*Falling Edge ONE & ZERO*/
	SET_BIT(MCUCR, ISC11);
     fa2:	a5 e5       	ldi	r26, 0x55	; 85
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e5 e5       	ldi	r30, 0x55	; 85
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	88 60       	ori	r24, 0x08	; 8
     fae:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, ISC10);
     fb0:	a5 e5       	ldi	r26, 0x55	; 85
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e5 e5       	ldi	r30, 0x55	; 85
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8b 7f       	andi	r24, 0xFB	; 251
     fbc:	8c 93       	st	X, r24
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <MEXTI_voidINT2>:

void MEXTI_voidINT2 (void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	/*Enable External Interrupt 1*/
	SET_BIT(GICR, INT2);
     fcc:	ab e5       	ldi	r26, 0x5B	; 91
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	eb e5       	ldi	r30, 0x5B	; 91
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 62       	ori	r24, 0x20	; 32
     fd8:	8c 93       	st	X, r24

	/*Configure Control External Interrupt 1 Sense*/
	/*ONE Rising Edge On INT2 Activates The Interrupt*/
	SET_BIT(MCUCR, ISC2);
     fda:	a5 e5       	ldi	r26, 0x55	; 85
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e5 e5       	ldi	r30, 0x55	; 85
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	8c 93       	st	X, r24

	/*If We want to change it into Falling Edge We Shall Write One*/
	//CLR_BIT(MCUCR, ISC2);
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <__vector_2>:
//{
//
//}

void __vector_2(void)
{
     fee:	1f 92       	push	r1
     ff0:	0f 92       	push	r0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	0f 92       	push	r0
     ff6:	11 24       	eor	r1, r1
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62

}
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <__vector_3>:

void __vector_3(void)
{
    100e:	1f 92       	push	r1
    1010:	0f 92       	push	r0
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	0f 92       	push	r0
    1016:	11 24       	eor	r1, r1
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62

}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <MDIO_voidInit>:




void MDIO_voidInit()
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	DDRA  = MDIO_DDRA_DIRECTION;
    1036:	ea e3       	ldi	r30, 0x3A	; 58
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	8e ef       	ldi	r24, 0xFE	; 254
    103c:	80 83       	st	Z, r24
    DDRB  = MDIO_DDRB_DIRECTION;
    103e:	e7 e3       	ldi	r30, 0x37	; 55
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8e ef       	ldi	r24, 0xFE	; 254
    1044:	80 83       	st	Z, r24
    DDRC  = MDIO_DDRC_DIRECTION;
    1046:	e4 e3       	ldi	r30, 0x34	; 52
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	80 83       	st	Z, r24
    DDRD  = MDIO_DDRD_DIRECTION;
    104e:	e1 e3       	ldi	r30, 0x31	; 49
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	88 ef       	ldi	r24, 0xF8	; 248
    1054:	80 83       	st	Z, r24

    PORTA = MDIO_PORTA_VALUE;
    1056:	eb e3       	ldi	r30, 0x3B	; 59
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	10 82       	st	Z, r1
    PORTB = MDIO_PORTB_VALUE;
    105c:	e8 e3       	ldi	r30, 0x38	; 56
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	10 82       	st	Z, r1
    PORTC = MDIO_PORTC_VALUE;
    1062:	e5 e3       	ldi	r30, 0x35	; 53
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	10 82       	st	Z, r1
    PORTD = MDIO_PORTD_VALUE;
    1068:	e2 e3       	ldi	r30, 0x32	; 50
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	80 83       	st	Z, r24
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <MDIO_voidSetPinDirection>:


void MDIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	27 97       	sbiw	r28, 0x07	; 7
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	6a 83       	std	Y+2, r22	; 0x02
    108e:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8Port <= 3) && (Copy_u8Pin <=7) && (Copy_u8Direction <=1))
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	08 f0       	brcs	.+2      	; 0x1098 <MDIO_voidSetPinDirection+0x22>
    1096:	f2 c0       	rjmp	.+484    	; 0x127c <MDIO_voidSetPinDirection+0x206>
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <MDIO_voidSetPinDirection+0x2a>
    109e:	ee c0       	rjmp	.+476    	; 0x127c <MDIO_voidSetPinDirection+0x206>
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <MDIO_voidSetPinDirection+0x32>
    10a6:	ea c0       	rjmp	.+468    	; 0x127c <MDIO_voidSetPinDirection+0x206>
	{

		/*Input Direction*/
		if(0 == Copy_u8Direction)
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 23       	and	r24, r24
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <MDIO_voidSetPinDirection+0x3a>
    10ae:	74 c0       	rjmp	.+232    	; 0x1198 <MDIO_voidSetPinDirection+0x122>
		{
			/*Switch Group Number*/
			switch(Copy_u8Port)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3f 83       	std	Y+7, r19	; 0x07
    10b8:	2e 83       	std	Y+6, r18	; 0x06
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	59 f1       	breq	.+86     	; 0x111a <MDIO_voidSetPinDirection+0xa4>
    10c4:	2e 81       	ldd	r18, Y+6	; 0x06
    10c6:	3f 81       	ldd	r19, Y+7	; 0x07
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <MDIO_voidSetPinDirection+0x62>
    10ce:	8e 81       	ldd	r24, Y+6	; 0x06
    10d0:	9f 81       	ldd	r25, Y+7	; 0x07
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	69 f0       	breq	.+26     	; 0x10f0 <MDIO_voidSetPinDirection+0x7a>
    10d6:	d2 c0       	rjmp	.+420    	; 0x127c <MDIO_voidSetPinDirection+0x206>
    10d8:	2e 81       	ldd	r18, Y+6	; 0x06
    10da:	3f 81       	ldd	r19, Y+7	; 0x07
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	89 f1       	breq	.+98     	; 0x1144 <MDIO_voidSetPinDirection+0xce>
    10e2:	8e 81       	ldd	r24, Y+6	; 0x06
    10e4:	9f 81       	ldd	r25, Y+7	; 0x07
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	91 05       	cpc	r25, r1
    10ea:	09 f4       	brne	.+2      	; 0x10ee <MDIO_voidSetPinDirection+0x78>
    10ec:	40 c0       	rjmp	.+128    	; 0x116e <MDIO_voidSetPinDirection+0xf8>
    10ee:	c6 c0       	rjmp	.+396    	; 0x127c <MDIO_voidSetPinDirection+0x206>
			{
			case 0: CLR_BIT(DDRA,Copy_u8Pin); break;
    10f0:	aa e3       	ldi	r26, 0x3A	; 58
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ea e3       	ldi	r30, 0x3A	; 58
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <MDIO_voidSetPinDirection+0x98>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <MDIO_voidSetPinDirection+0x94>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	b1 c0       	rjmp	.+354    	; 0x127c <MDIO_voidSetPinDirection+0x206>
			case 1: CLR_BIT(DDRB,Copy_u8Pin); break;
    111a:	a7 e3       	ldi	r26, 0x37	; 55
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e3       	ldi	r30, 0x37	; 55
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <MDIO_voidSetPinDirection+0xc2>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <MDIO_voidSetPinDirection+0xbe>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	9c c0       	rjmp	.+312    	; 0x127c <MDIO_voidSetPinDirection+0x206>
			case 2: CLR_BIT(DDRC,Copy_u8Pin); break;
    1144:	a4 e3       	ldi	r26, 0x34	; 52
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e4 e3       	ldi	r30, 0x34	; 52
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <MDIO_voidSetPinDirection+0xec>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <MDIO_voidSetPinDirection+0xe8>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	87 c0       	rjmp	.+270    	; 0x127c <MDIO_voidSetPinDirection+0x206>
			case 3: CLR_BIT(DDRD,Copy_u8Pin); break;
    116e:	a1 e3       	ldi	r26, 0x31	; 49
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e1 e3       	ldi	r30, 0x31	; 49
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <MDIO_voidSetPinDirection+0x116>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <MDIO_voidSetPinDirection+0x112>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	72 c0       	rjmp	.+228    	; 0x127c <MDIO_voidSetPinDirection+0x206>

			}

			/*Output Direction*/
		}else if (1 == Copy_u8Direction)
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <MDIO_voidSetPinDirection+0x12a>
    119e:	6e c0       	rjmp	.+220    	; 0x127c <MDIO_voidSetPinDirection+0x206>
		{
			/*Switch Group Number*/
			switch(Copy_u8Port)
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3d 83       	std	Y+5, r19	; 0x05
    11a8:	2c 83       	std	Y+4, r18	; 0x04
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	49 f1       	breq	.+82     	; 0x1206 <MDIO_voidSetPinDirection+0x190>
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	3d 81       	ldd	r19, Y+5	; 0x05
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <MDIO_voidSetPinDirection+0x152>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	61 f0       	breq	.+24     	; 0x11de <MDIO_voidSetPinDirection+0x168>
    11c6:	5a c0       	rjmp	.+180    	; 0x127c <MDIO_voidSetPinDirection+0x206>
    11c8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ca:	3d 81       	ldd	r19, Y+5	; 0x05
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	71 f1       	breq	.+92     	; 0x122e <MDIO_voidSetPinDirection+0x1b8>
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	e9 f1       	breq	.+122    	; 0x1256 <MDIO_voidSetPinDirection+0x1e0>
    11dc:	4f c0       	rjmp	.+158    	; 0x127c <MDIO_voidSetPinDirection+0x206>
			{
			case 0: SET_BIT(DDRA,Copy_u8Pin); break;
    11de:	aa e3       	ldi	r26, 0x3A	; 58
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	ea e3       	ldi	r30, 0x3A	; 58
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <MDIO_voidSetPinDirection+0x186>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <MDIO_voidSetPinDirection+0x182>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	3b c0       	rjmp	.+118    	; 0x127c <MDIO_voidSetPinDirection+0x206>
			case 1: SET_BIT(DDRB,Copy_u8Pin); break;
    1206:	a7 e3       	ldi	r26, 0x37	; 55
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e7 e3       	ldi	r30, 0x37	; 55
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <MDIO_voidSetPinDirection+0x1ae>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <MDIO_voidSetPinDirection+0x1aa>
    1228:	84 2b       	or	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	27 c0       	rjmp	.+78     	; 0x127c <MDIO_voidSetPinDirection+0x206>
			case 2: SET_BIT(DDRC,Copy_u8Pin); break;
    122e:	a4 e3       	ldi	r26, 0x34	; 52
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e4 e3       	ldi	r30, 0x34	; 52
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <MDIO_voidSetPinDirection+0x1d6>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <MDIO_voidSetPinDirection+0x1d2>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	13 c0       	rjmp	.+38     	; 0x127c <MDIO_voidSetPinDirection+0x206>
			case 3: SET_BIT(DDRD,Copy_u8Pin); break;
    1256:	a1 e3       	ldi	r26, 0x31	; 49
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e1 e3       	ldi	r30, 0x31	; 49
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <MDIO_voidSetPinDirection+0x1fe>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <MDIO_voidSetPinDirection+0x1fa>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24

	}else{
		/*DO NOTHING*/
	}

}
    127c:	27 96       	adiw	r28, 0x07	; 7
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	27 97       	sbiw	r28, 0x07	; 7
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	6a 83       	std	Y+2, r22	; 0x02
    12a6:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8Port <= 3) && (Copy_u8Pin <=7) && (Copy_u8Value <=1))
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <MDIO_voidSetPinValue+0x22>
    12ae:	f2 c0       	rjmp	.+484    	; 0x1494 <MDIO_voidSetPinValue+0x206>
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <MDIO_voidSetPinValue+0x2a>
    12b6:	ee c0       	rjmp	.+476    	; 0x1494 <MDIO_voidSetPinValue+0x206>
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <MDIO_voidSetPinValue+0x32>
    12be:	ea c0       	rjmp	.+468    	; 0x1494 <MDIO_voidSetPinValue+0x206>
	{

		/*Low Value*/
		if(0 == Copy_u8Value)
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	88 23       	and	r24, r24
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <MDIO_voidSetPinValue+0x3a>
    12c6:	74 c0       	rjmp	.+232    	; 0x13b0 <MDIO_voidSetPinValue+0x122>
		{
			/*Switch Group Number*/
			switch(Copy_u8Port)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3f 83       	std	Y+7, r19	; 0x07
    12d0:	2e 83       	std	Y+6, r18	; 0x06
    12d2:	8e 81       	ldd	r24, Y+6	; 0x06
    12d4:	9f 81       	ldd	r25, Y+7	; 0x07
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	91 05       	cpc	r25, r1
    12da:	59 f1       	breq	.+86     	; 0x1332 <MDIO_voidSetPinValue+0xa4>
    12dc:	2e 81       	ldd	r18, Y+6	; 0x06
    12de:	3f 81       	ldd	r19, Y+7	; 0x07
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <MDIO_voidSetPinValue+0x62>
    12e6:	8e 81       	ldd	r24, Y+6	; 0x06
    12e8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f0       	breq	.+26     	; 0x1308 <MDIO_voidSetPinValue+0x7a>
    12ee:	d2 c0       	rjmp	.+420    	; 0x1494 <MDIO_voidSetPinValue+0x206>
    12f0:	2e 81       	ldd	r18, Y+6	; 0x06
    12f2:	3f 81       	ldd	r19, Y+7	; 0x07
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	89 f1       	breq	.+98     	; 0x135c <MDIO_voidSetPinValue+0xce>
    12fa:	8e 81       	ldd	r24, Y+6	; 0x06
    12fc:	9f 81       	ldd	r25, Y+7	; 0x07
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <MDIO_voidSetPinValue+0x78>
    1304:	40 c0       	rjmp	.+128    	; 0x1386 <MDIO_voidSetPinValue+0xf8>
    1306:	c6 c0       	rjmp	.+396    	; 0x1494 <MDIO_voidSetPinValue+0x206>
			{
			case 0: CLR_BIT(PORTA,Copy_u8Pin); break;
    1308:	ab e3       	ldi	r26, 0x3B	; 59
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <MDIO_voidSetPinValue+0x98>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <MDIO_voidSetPinValue+0x94>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	b1 c0       	rjmp	.+354    	; 0x1494 <MDIO_voidSetPinValue+0x206>
			case 1: CLR_BIT(PORTB,Copy_u8Pin); break;
    1332:	a8 e3       	ldi	r26, 0x38	; 56
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e8 e3       	ldi	r30, 0x38	; 56
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <MDIO_voidSetPinValue+0xc2>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <MDIO_voidSetPinValue+0xbe>
    1354:	80 95       	com	r24
    1356:	84 23       	and	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	9c c0       	rjmp	.+312    	; 0x1494 <MDIO_voidSetPinValue+0x206>
			case 2: CLR_BIT(PORTC,Copy_u8Pin); break;
    135c:	a5 e3       	ldi	r26, 0x35	; 53
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e3       	ldi	r30, 0x35	; 53
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <MDIO_voidSetPinValue+0xec>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <MDIO_voidSetPinValue+0xe8>
    137e:	80 95       	com	r24
    1380:	84 23       	and	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	87 c0       	rjmp	.+270    	; 0x1494 <MDIO_voidSetPinValue+0x206>
			case 3: CLR_BIT(PORTD,Copy_u8Pin); break;
    1386:	a2 e3       	ldi	r26, 0x32	; 50
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <MDIO_voidSetPinValue+0x116>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <MDIO_voidSetPinValue+0x112>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	72 c0       	rjmp	.+228    	; 0x1494 <MDIO_voidSetPinValue+0x206>

			}

			/*High Value*/
		}else if (1 == Copy_u8Value)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <MDIO_voidSetPinValue+0x12a>
    13b6:	6e c0       	rjmp	.+220    	; 0x1494 <MDIO_voidSetPinValue+0x206>
		{
			/*Switch Group Number*/
			switch(Copy_u8Port)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3d 83       	std	Y+5, r19	; 0x05
    13c0:	2c 83       	std	Y+4, r18	; 0x04
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	91 05       	cpc	r25, r1
    13ca:	49 f1       	breq	.+82     	; 0x141e <MDIO_voidSetPinValue+0x190>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <MDIO_voidSetPinValue+0x152>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <MDIO_voidSetPinValue+0x168>
    13de:	5a c0       	rjmp	.+180    	; 0x1494 <MDIO_voidSetPinValue+0x206>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	71 f1       	breq	.+92     	; 0x1446 <MDIO_voidSetPinValue+0x1b8>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	e9 f1       	breq	.+122    	; 0x146e <MDIO_voidSetPinValue+0x1e0>
    13f4:	4f c0       	rjmp	.+158    	; 0x1494 <MDIO_voidSetPinValue+0x206>
			{
			case 0: SET_BIT(PORTA,Copy_u8Pin); break;
    13f6:	ab e3       	ldi	r26, 0x3B	; 59
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <MDIO_voidSetPinValue+0x186>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <MDIO_voidSetPinValue+0x182>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	3b c0       	rjmp	.+118    	; 0x1494 <MDIO_voidSetPinValue+0x206>
			case 1: SET_BIT(PORTB,Copy_u8Pin); break;
    141e:	a8 e3       	ldi	r26, 0x38	; 56
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e8 e3       	ldi	r30, 0x38	; 56
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <MDIO_voidSetPinValue+0x1ae>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <MDIO_voidSetPinValue+0x1aa>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	27 c0       	rjmp	.+78     	; 0x1494 <MDIO_voidSetPinValue+0x206>
			case 2: SET_BIT(PORTC,Copy_u8Pin); break;
    1446:	a5 e3       	ldi	r26, 0x35	; 53
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e5 e3       	ldi	r30, 0x35	; 53
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <MDIO_voidSetPinValue+0x1d6>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <MDIO_voidSetPinValue+0x1d2>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	13 c0       	rjmp	.+38     	; 0x1494 <MDIO_voidSetPinValue+0x206>
			case 3: SET_BIT(PORTD,Copy_u8Pin); break;
    146e:	a2 e3       	ldi	r26, 0x32	; 50
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e2 e3       	ldi	r30, 0x32	; 50
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <MDIO_voidSetPinValue+0x1fe>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <MDIO_voidSetPinValue+0x1fa>
    1490:	84 2b       	or	r24, r20
    1492:	8c 93       	st	X, r24
	}else{
		/*DO NOTHING*/
	}


}
    1494:	27 96       	adiw	r28, 0x07	; 7
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <MDIO_u8GetPinValue>:

u8  MDIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <MDIO_u8GetPinValue+0x6>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <MDIO_u8GetPinValue+0x8>
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	8a 83       	std	Y+2, r24	; 0x02
    14b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue;

	if(Copy_u8Port <=3  && Copy_u8Pin <=7)
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <MDIO_u8GetPinValue+0x1a>
    14be:	9d c0       	rjmp	.+314    	; 0x15fa <MDIO_u8GetPinValue+0x154>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <MDIO_u8GetPinValue+0x22>
    14c6:	99 c0       	rjmp	.+306    	; 0x15fa <MDIO_u8GetPinValue+0x154>
	{

		switch(Copy_u8Port)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3d 83       	std	Y+5, r19	; 0x05
    14d0:	2c 83       	std	Y+4, r18	; 0x04
    14d2:	4c 81       	ldd	r20, Y+4	; 0x04
    14d4:	5d 81       	ldd	r21, Y+5	; 0x05
    14d6:	41 30       	cpi	r20, 0x01	; 1
    14d8:	51 05       	cpc	r21, r1
    14da:	b1 f1       	breq	.+108    	; 0x1548 <MDIO_u8GetPinValue+0xa2>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	91 05       	cpc	r25, r1
    14e4:	34 f4       	brge	.+12     	; 0x14f2 <MDIO_u8GetPinValue+0x4c>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	21 15       	cp	r18, r1
    14ec:	31 05       	cpc	r19, r1
    14ee:	71 f0       	breq	.+28     	; 0x150c <MDIO_u8GetPinValue+0x66>
    14f0:	84 c0       	rjmp	.+264    	; 0x15fa <MDIO_u8GetPinValue+0x154>
    14f2:	4c 81       	ldd	r20, Y+4	; 0x04
    14f4:	5d 81       	ldd	r21, Y+5	; 0x05
    14f6:	42 30       	cpi	r20, 0x02	; 2
    14f8:	51 05       	cpc	r21, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <MDIO_u8GetPinValue+0x58>
    14fc:	43 c0       	rjmp	.+134    	; 0x1584 <MDIO_u8GetPinValue+0xde>
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	9d 81       	ldd	r25, Y+5	; 0x05
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <MDIO_u8GetPinValue+0x64>
    1508:	5b c0       	rjmp	.+182    	; 0x15c0 <MDIO_u8GetPinValue+0x11a>
    150a:	77 c0       	rjmp	.+238    	; 0x15fa <MDIO_u8GetPinValue+0x154>
		{
			case MDIO_PORTA: local_u8PinValue = GET_BIT(PINA, Copy_u8Pin); break;
    150c:	e9 e3       	ldi	r30, 0x39	; 57
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <MDIO_u8GetPinValue+0x80>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	2a 95       	dec	r18
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <MDIO_u8GetPinValue+0x7c>
    152a:	9a 01       	movw	r18, r20
    152c:	28 23       	and	r18, r24
    152e:	39 23       	and	r19, r25
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <MDIO_u8GetPinValue+0x98>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <MDIO_u8GetPinValue+0x94>
    1542:	ca 01       	movw	r24, r20
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	59 c0       	rjmp	.+178    	; 0x15fa <MDIO_u8GetPinValue+0x154>
			case MDIO_PORTB: local_u8PinValue = GET_BIT(PINB, Copy_u8Pin); break;
    1548:	e6 e3       	ldi	r30, 0x36	; 54
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <MDIO_u8GetPinValue+0xbc>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	2a 95       	dec	r18
    1564:	e2 f7       	brpl	.-8      	; 0x155e <MDIO_u8GetPinValue+0xb8>
    1566:	9a 01       	movw	r18, r20
    1568:	28 23       	and	r18, r24
    156a:	39 23       	and	r19, r25
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a9 01       	movw	r20, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <MDIO_u8GetPinValue+0xd4>
    1576:	55 95       	asr	r21
    1578:	47 95       	ror	r20
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <MDIO_u8GetPinValue+0xd0>
    157e:	ca 01       	movw	r24, r20
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	3b c0       	rjmp	.+118    	; 0x15fa <MDIO_u8GetPinValue+0x154>
			case MDIO_PORTC: local_u8PinValue = GET_BIT(PINC, Copy_u8Pin); break;
    1584:	e3 e3       	ldi	r30, 0x33	; 51
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <MDIO_u8GetPinValue+0xf8>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	2a 95       	dec	r18
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <MDIO_u8GetPinValue+0xf4>
    15a2:	9a 01       	movw	r18, r20
    15a4:	28 23       	and	r18, r24
    15a6:	39 23       	and	r19, r25
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <MDIO_u8GetPinValue+0x110>
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <MDIO_u8GetPinValue+0x10c>
    15ba:	ca 01       	movw	r24, r20
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	1d c0       	rjmp	.+58     	; 0x15fa <MDIO_u8GetPinValue+0x154>
			case MDIO_PORTD: local_u8PinValue = GET_BIT(PIND, Copy_u8Pin); break;
    15c0:	e0 e3       	ldi	r30, 0x30	; 48
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <MDIO_u8GetPinValue+0x134>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	2a 95       	dec	r18
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <MDIO_u8GetPinValue+0x130>
    15de:	9a 01       	movw	r18, r20
    15e0:	28 23       	and	r18, r24
    15e2:	39 23       	and	r19, r25
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <MDIO_u8GetPinValue+0x14c>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <MDIO_u8GetPinValue+0x148>
    15f6:	ca 01       	movw	r24, r20
    15f8:	89 83       	std	Y+1, r24	; 0x01
		}


	}else{/*DO NOTHING*/}

	return local_u8PinValue;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <MDIO_voidSetPortDirection+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <MDIO_voidSetPortDirection+0x8>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <MDIO_voidSetPortDirection+0xa>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Port <= 3)
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	84 30       	cpi	r24, 0x04	; 4
    1622:	08 f0       	brcs	.+2      	; 0x1626 <MDIO_voidSetPortDirection+0x1a>
    1624:	67 c0       	rjmp	.+206    	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
	{

		/*Input Direction*/
		if(0 == Copy_u8Direction)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	88 23       	and	r24, r24
    162a:	79 f5       	brne	.+94     	; 0x168a <MDIO_voidSetPortDirection+0x7e>
		{
			/*Switch Group Number*/
			switch(Copy_u8Port)
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	3e 83       	std	Y+6, r19	; 0x06
    1634:	2d 83       	std	Y+5, r18	; 0x05
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	c9 f0       	breq	.+50     	; 0x1672 <MDIO_voidSetPortDirection+0x66>
    1640:	2d 81       	ldd	r18, Y+5	; 0x05
    1642:	3e 81       	ldd	r19, Y+6	; 0x06
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	2c f4       	brge	.+10     	; 0x1654 <MDIO_voidSetPortDirection+0x48>
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	61 f0       	breq	.+24     	; 0x166a <MDIO_voidSetPortDirection+0x5e>
    1652:	50 c0       	rjmp	.+160    	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
    1654:	2d 81       	ldd	r18, Y+5	; 0x05
    1656:	3e 81       	ldd	r19, Y+6	; 0x06
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	71 f0       	breq	.+28     	; 0x167a <MDIO_voidSetPortDirection+0x6e>
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	91 05       	cpc	r25, r1
    1666:	69 f0       	breq	.+26     	; 0x1682 <MDIO_voidSetPortDirection+0x76>
    1668:	45 c0       	rjmp	.+138    	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
			{
			case 0: DDRA = 0; break;
    166a:	ea e3       	ldi	r30, 0x3A	; 58
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
    1670:	41 c0       	rjmp	.+130    	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
			case 1: DDRB = 0; break;
    1672:	e7 e3       	ldi	r30, 0x37	; 55
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	10 82       	st	Z, r1
    1678:	3d c0       	rjmp	.+122    	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
			case 2: DDRC = 0; break;
    167a:	e4 e3       	ldi	r30, 0x34	; 52
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	10 82       	st	Z, r1
    1680:	39 c0       	rjmp	.+114    	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
			case 3: DDRD = 0; break;
    1682:	e1 e3       	ldi	r30, 0x31	; 49
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	10 82       	st	Z, r1
    1688:	35 c0       	rjmp	.+106    	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>

			}

			/*Output Direction*/
		}else if (1 == Copy_u8Direction)
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	91 f5       	brne	.+100    	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
		{
			/*Switch Group Number*/
			switch(Copy_u8Port)
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	3c 83       	std	Y+4, r19	; 0x04
    1698:	2b 83       	std	Y+3, r18	; 0x03
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	d1 f0       	breq	.+52     	; 0x16d8 <MDIO_voidSetPortDirection+0xcc>
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	3c 81       	ldd	r19, Y+4	; 0x04
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <MDIO_voidSetPortDirection+0xac>
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	61 f0       	breq	.+24     	; 0x16ce <MDIO_voidSetPortDirection+0xc2>
    16b6:	1e c0       	rjmp	.+60     	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
    16b8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ba:	3c 81       	ldd	r19, Y+4	; 0x04
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <MDIO_voidSetPortDirection+0xd6>
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	91 05       	cpc	r25, r1
    16ca:	81 f0       	breq	.+32     	; 0x16ec <MDIO_voidSetPortDirection+0xe0>
    16cc:	13 c0       	rjmp	.+38     	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
			{
			case 0: DDRA = 255; break;
    16ce:	ea e3       	ldi	r30, 0x3A	; 58
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	8f ef       	ldi	r24, 0xFF	; 255
    16d4:	80 83       	st	Z, r24
    16d6:	0e c0       	rjmp	.+28     	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
			case 1: DDRB = 255; break;
    16d8:	e7 e3       	ldi	r30, 0x37	; 55
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	80 83       	st	Z, r24
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
			case 2: DDRC = 255; break;
    16e2:	e4 e3       	ldi	r30, 0x34	; 52
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	80 83       	st	Z, r24
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <MDIO_voidSetPortDirection+0xe8>
			case 3: DDRD = 255; break;
    16ec:	e1 e3       	ldi	r30, 0x31	; 49
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	80 83       	st	Z, r24

			}
		}
	
	}else{/*DO NOTHING*/}
}
    16f4:	26 96       	adiw	r28, 0x06	; 6
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <MDIO_voidSetPortValue>:


void MDIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <MDIO_voidSetPortValue+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <MDIO_voidSetPortValue+0x8>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Port <= 3)
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	84 30       	cpi	r24, 0x04	; 4
    171a:	90 f5       	brcc	.+100    	; 0x1780 <MDIO_voidSetPortValue+0x7a>
	{
		
		switch(Copy_u8Port)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3c 83       	std	Y+4, r19	; 0x04
    1724:	2b 83       	std	Y+3, r18	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	d1 f0       	breq	.+52     	; 0x1764 <MDIO_voidSetPortValue+0x5e>
    1730:	2b 81       	ldd	r18, Y+3	; 0x03
    1732:	3c 81       	ldd	r19, Y+4	; 0x04
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <MDIO_voidSetPortValue+0x3e>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	61 f0       	breq	.+24     	; 0x175a <MDIO_voidSetPortValue+0x54>
    1742:	1e c0       	rjmp	.+60     	; 0x1780 <MDIO_voidSetPortValue+0x7a>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <MDIO_voidSetPortValue+0x68>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	81 f0       	breq	.+32     	; 0x1778 <MDIO_voidSetPortValue+0x72>
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <MDIO_voidSetPortValue+0x7a>
		{
		case 0: PORTA = Copy_u8Value; break;
    175a:	eb e3       	ldi	r30, 0x3B	; 59
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	80 83       	st	Z, r24
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <MDIO_voidSetPortValue+0x7a>
		case 1: PORTB = Copy_u8Value; break;
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 83       	st	Z, r24
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <MDIO_voidSetPortValue+0x7a>
		case 2: PORTC = Copy_u8Value; break;
    176e:	e5 e3       	ldi	r30, 0x35	; 53
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <MDIO_voidSetPortValue+0x7a>
		case 3: PORTD = Copy_u8Value; break;
    1778:	e2 e3       	ldi	r30, 0x32	; 50
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24

		}
	
	}else{/*DO NOTHING*/}

}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <MDIO_u8GetPortValue>:


u8 MDIO_u8GetPortValue(u8 Copy_u8Port)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <MDIO_u8GetPortValue+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <MDIO_u8GetPortValue+0x8>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8PortValue;

	if(Copy_u8Port <=3)
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	84 30       	cpi	r24, 0x04	; 4
    17a0:	90 f5       	brcc	.+100    	; 0x1806 <MDIO_u8GetPortValue+0x78>
	{

		switch(Copy_u8Port)
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3c 83       	std	Y+4, r19	; 0x04
    17aa:	2b 83       	std	Y+3, r18	; 0x03
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	d1 f0       	breq	.+52     	; 0x17ea <MDIO_u8GetPortValue+0x5c>
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	2c f4       	brge	.+10     	; 0x17ca <MDIO_u8GetPortValue+0x3c>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	61 f0       	breq	.+24     	; 0x17e0 <MDIO_u8GetPortValue+0x52>
    17c8:	1e c0       	rjmp	.+60     	; 0x1806 <MDIO_u8GetPortValue+0x78>
    17ca:	2b 81       	ldd	r18, Y+3	; 0x03
    17cc:	3c 81       	ldd	r19, Y+4	; 0x04
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	81 f0       	breq	.+32     	; 0x17f4 <MDIO_u8GetPortValue+0x66>
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	91 05       	cpc	r25, r1
    17dc:	81 f0       	breq	.+32     	; 0x17fe <MDIO_u8GetPortValue+0x70>
    17de:	13 c0       	rjmp	.+38     	; 0x1806 <MDIO_u8GetPortValue+0x78>
		{
			case 0: local_u8PortValue = PINA; break;
    17e0:	e9 e3       	ldi	r30, 0x39	; 57
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	0e c0       	rjmp	.+28     	; 0x1806 <MDIO_u8GetPortValue+0x78>
			case 1: local_u8PortValue = PINB; break;
    17ea:	e6 e3       	ldi	r30, 0x36	; 54
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <MDIO_u8GetPortValue+0x78>
			case 2: local_u8PortValue = PINC; break;
    17f4:	e3 e3       	ldi	r30, 0x33	; 51
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <MDIO_u8GetPortValue+0x78>
			case 3: local_u8PortValue = PIND; break;
    17fe:	e0 e3       	ldi	r30, 0x30	; 48
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	89 83       	std	Y+1, r24	; 0x01
		}


	}else{/*DO NOTHING*/}

	return local_u8PortValue;
    1806:	89 81       	ldd	r24, Y+1	; 0x01
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <MADC_voidInit>:

#include "MADC_private.h"
#include "MADC_interface.h"

void MADC_voidInit(void)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as reference voltage 01 */
	CLR_BIT(ADMUX,ADMUX_REFS1);
    181e:	a7 e2       	ldi	r26, 0x27	; 39
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e7 e2       	ldi	r30, 0x27	; 39
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8f 77       	andi	r24, 0x7F	; 127
    182a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    182c:	a7 e2       	ldi	r26, 0x27	; 39
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e7 e2       	ldi	r30, 0x27	; 39
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 64       	ori	r24, 0x40	; 64
    1838:	8c 93       	st	X, r24

	/*activate left adjust result*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
    183a:	a7 e2       	ldi	r26, 0x27	; 39
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e7 e2       	ldi	r30, 0x27	; 39
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 62       	ori	r24, 0x20	; 32
    1846:	8c 93       	st	X, r24

    /*set prescaler to divided by 128*/
    SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1848:	a6 e2       	ldi	r26, 0x26	; 38
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e6 e2       	ldi	r30, 0x26	; 38
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	84 60       	ori	r24, 0x04	; 4
    1854:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1856:	a6 e2       	ldi	r26, 0x26	; 38
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e6 e2       	ldi	r30, 0x26	; 38
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	82 60       	ori	r24, 0x02	; 2
    1862:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1864:	a6 e2       	ldi	r26, 0x26	; 38
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e6 e2       	ldi	r30, 0x26	; 38
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	81 60       	ori	r24, 0x01	; 1
    1870:	8c 93       	st	X, r24

	/*ENABLE ADC */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1872:	a6 e2       	ldi	r26, 0x26	; 38
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e6 e2       	ldi	r30, 0x26	; 38
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	80 68       	ori	r24, 0x80	; 128
    187e:	8c 93       	st	X, r24

}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <MADC_u8ReadChannel>:

u8 MADC_u8ReadChannel(u8 Copy_u8Channel)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	0f 92       	push	r0
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
	/*clear the MUX bits in ADMUX register*/
	ADMUX &= ADMUX_MASK;
    1892:	a7 e2       	ldi	r26, 0x27	; 39
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e7 e2       	ldi	r30, 0x27	; 39
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 7e       	andi	r24, 0xE0	; 224
    189e:	8c 93       	st	X, r24

	/*set the required channel into the MUX bits*/
	ADMUX |= Copy_u8Channel;
    18a0:	a7 e2       	ldi	r26, 0x27	; 39
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e7 e2       	ldi	r30, 0x27	; 39
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	90 81       	ld	r25, Z
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	89 2b       	or	r24, r25
    18ae:	8c 93       	st	X, r24

	/*start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    18b0:	a6 e2       	ldi	r26, 0x26	; 38
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e6 e2       	ldi	r30, 0x26	; 38
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 64       	ori	r24, 0x40	; 64
    18bc:	8c 93       	st	X, r24

	/*pooling (busy waiting) until the conversion complete flag is set*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF) == 1))
    18be:	e6 e2       	ldi	r30, 0x26	; 38
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	80 71       	andi	r24, 0x10	; 16
    18ca:	90 70       	andi	r25, 0x00	; 0
    18cc:	95 95       	asr	r25
    18ce:	87 95       	ror	r24
    18d0:	95 95       	asr	r25
    18d2:	87 95       	ror	r24
    18d4:	95 95       	asr	r25
    18d6:	87 95       	ror	r24
    18d8:	95 95       	asr	r25
    18da:	87 95       	ror	r24
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	91 05       	cpc	r25, r1
    18e0:	71 f3       	breq	.-36     	; 0x18be <MADC_u8ReadChannel+0x38>
	{
		/*Waiting until the conversion complete flag is set*/
	}

	/*clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    18e2:	a6 e2       	ldi	r26, 0x26	; 38
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e6 e2       	ldi	r30, 0x26	; 38
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 61       	ori	r24, 0x10	; 16
    18ee:	8c 93       	st	X, r24

	/*return the reading*/
	return ADCH;
    18f0:	e5 e2       	ldi	r30, 0x25	; 37
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
}
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <HSEVEN_SEGMENT_voidNum0>:
#include "../../MCAL/MADC/MADC_interface.h"
#include "HSEVEN_SEGMENT_config.h"
#include "HSEVEN_SEGMENT_interface.h"

void HSEVEN_SEGMENT_voidNum0(u8 Copy_u8Port)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	0f 92       	push	r0
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_HIGH);
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	61 e0       	ldi	r22, 0x01	; 1
    190e:	41 e0       	ldi	r20, 0x01	; 1
    1910:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_HIGH);
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	62 e0       	ldi	r22, 0x02	; 2
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_HIGH);
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	63 e0       	ldi	r22, 0x03	; 3
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_HIGH);
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	64 e0       	ldi	r22, 0x04	; 4
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_HIGH);
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	65 e0       	ldi	r22, 0x05	; 5
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_HIGH);
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	66 e0       	ldi	r22, 0x06	; 6
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_LOW);
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	67 e0       	ldi	r22, 0x07	; 7
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>

}
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <HSEVEN_SEGMENT_voidNum1>:

void HSEVEN_SEGMENT_voidNum1(u8 Copy_u8Port)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	0f 92       	push	r0
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_LOW);
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_HIGH);
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	62 e0       	ldi	r22, 0x02	; 2
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_HIGH);
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_LOW);
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	64 e0       	ldi	r22, 0x04	; 4
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_LOW);
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	65 e0       	ldi	r22, 0x05	; 5
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_LOW);
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	66 e0       	ldi	r22, 0x06	; 6
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_LOW);
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	67 e0       	ldi	r22, 0x07	; 7
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <HSEVEN_SEGMENT_voidNum2>:

void HSEVEN_SEGMENT_voidNum2(u8 Copy_u8Port)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	0f 92       	push	r0
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_HIGH);
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_HIGH);
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	62 e0       	ldi	r22, 0x02	; 2
    19cc:	41 e0       	ldi	r20, 0x01	; 1
    19ce:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_LOW);
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	63 e0       	ldi	r22, 0x03	; 3
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_HIGH);
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	64 e0       	ldi	r22, 0x04	; 4
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_HIGH);
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	65 e0       	ldi	r22, 0x05	; 5
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_LOW);
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	66 e0       	ldi	r22, 0x06	; 6
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_HIGH);
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	67 e0       	ldi	r22, 0x07	; 7
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <HSEVEN_SEGMENT_voidNum3>:

void HSEVEN_SEGMENT_voidNum3(u8 Copy_u8Port)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	0f 92       	push	r0
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_HIGH);
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_HIGH);
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	62 e0       	ldi	r22, 0x02	; 2
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_HIGH);
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	63 e0       	ldi	r22, 0x03	; 3
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_HIGH);
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	64 e0       	ldi	r22, 0x04	; 4
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_LOW);
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	65 e0       	ldi	r22, 0x05	; 5
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_LOW);
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	66 e0       	ldi	r22, 0x06	; 6
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_HIGH);
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	67 e0       	ldi	r22, 0x07	; 7
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <HSEVEN_SEGMENT_voidNum4>:

void HSEVEN_SEGMENT_voidNum4(u8 Copy_u8Port)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	0f 92       	push	r0
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A , MDIO_PIN_LOW);
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B , MDIO_PIN_HIGH);
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	62 e0       	ldi	r22, 0x02	; 2
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C , MDIO_PIN_HIGH);
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	63 e0       	ldi	r22, 0x03	; 3
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D , MDIO_PIN_LOW);
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	64 e0       	ldi	r22, 0x04	; 4
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E , MDIO_PIN_LOW);
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	65 e0       	ldi	r22, 0x05	; 5
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F , MDIO_PIN_HIGH);
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	66 e0       	ldi	r22, 0x06	; 6
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G , MDIO_PIN_HIGH);
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	67 e0       	ldi	r22, 0x07	; 7
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>

}
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <HSEVEN_SEGMENT_voidNum5>:

void HSEVEN_SEGMENT_voidNum5(u8 Copy_u8Port)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_HIGH);
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_LOW);
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	62 e0       	ldi	r22, 0x02	; 2
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_HIGH);
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	63 e0       	ldi	r22, 0x03	; 3
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_HIGH);
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	64 e0       	ldi	r22, 0x04	; 4
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_LOW);
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	65 e0       	ldi	r22, 0x05	; 5
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_HIGH);
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	66 e0       	ldi	r22, 0x06	; 6
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_HIGH);
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	67 e0       	ldi	r22, 0x07	; 7
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <HSEVEN_SEGMENT_voidNum6>:

void HSEVEN_SEGMENT_voidNum6(u8 Copy_u8Port)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	0f 92       	push	r0
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_HIGH);
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_LOW);
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	62 e0       	ldi	r22, 0x02	; 2
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_HIGH);
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	63 e0       	ldi	r22, 0x03	; 3
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_HIGH);
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	64 e0       	ldi	r22, 0x04	; 4
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_HIGH);
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	65 e0       	ldi	r22, 0x05	; 5
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_HIGH);
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	66 e0       	ldi	r22, 0x06	; 6
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_HIGH);
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	67 e0       	ldi	r22, 0x07	; 7
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <HSEVEN_SEGMENT_voidNum7>:

void HSEVEN_SEGMENT_voidNum7(u8 Copy_u8Port)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_HIGH);
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	41 e0       	ldi	r20, 0x01	; 1
    1b86:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_HIGH);
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	62 e0       	ldi	r22, 0x02	; 2
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_HIGH);
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	63 e0       	ldi	r22, 0x03	; 3
    1b98:	41 e0       	ldi	r20, 0x01	; 1
    1b9a:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_LOW);
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	64 e0       	ldi	r22, 0x04	; 4
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_LOW);
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	65 e0       	ldi	r22, 0x05	; 5
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_LOW);
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	66 e0       	ldi	r22, 0x06	; 6
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_LOW);
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	67 e0       	ldi	r22, 0x07	; 7
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <HSEVEN_SEGMENT_voidNum8>:

void HSEVEN_SEGMENT_voidNum8(u8 Copy_u8Port)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_HIGH);
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_HIGH);
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	62 e0       	ldi	r22, 0x02	; 2
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_HIGH);
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	63 e0       	ldi	r22, 0x03	; 3
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_HIGH);
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	64 e0       	ldi	r22, 0x04	; 4
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_HIGH);
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	65 e0       	ldi	r22, 0x05	; 5
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_HIGH);
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	66 e0       	ldi	r22, 0x06	; 6
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_HIGH);
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	67 e0       	ldi	r22, 0x07	; 7
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <HSEVEN_SEGMENT_voidNum9>:

void HSEVEN_SEGMENT_voidNum9(u8 Copy_u8Port)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	0f 92       	push	r0
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(Copy_u8Port, PIN_A, MDIO_PIN_HIGH);
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_B, MDIO_PIN_HIGH);
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	62 e0       	ldi	r22, 0x02	; 2
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_C, MDIO_PIN_HIGH);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	63 e0       	ldi	r22, 0x03	; 3
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_D, MDIO_PIN_HIGH);
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	64 e0       	ldi	r22, 0x04	; 4
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_E, MDIO_PIN_LOW);
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	65 e0       	ldi	r22, 0x05	; 5
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_F, MDIO_PIN_HIGH);
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	66 e0       	ldi	r22, 0x06	; 6
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8Port, PIN_G, MDIO_PIN_HIGH);
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	67 e0       	ldi	r22, 0x07	; 7
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <HServo_Motor_voidOFF>:
#include "../../MCAL/MDIO/MDIO_interface.h"
#include "../../MCAL/MTIMER/MTIMER_interface.h"


void HServo_Motor_voidOFF ()
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_voidSetFastPWM_Value(124);
    1c8a:	8c e7       	ldi	r24, 0x7C	; 124
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 7c 07 	call	0xef8	; 0xef8 <MTIMER1_voidSetFastPWM_Value>
}
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <HServo_Motor_voidON>:

void HServo_Motor_voidON ()
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_voidSetFastPWM_Value(250);
    1ca0:	8a ef       	ldi	r24, 0xFA	; 250
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 7c 07 	call	0xef8	; 0xef8 <MTIMER1_voidSetFastPWM_Value>
}
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <HLED_voidOn>:
#include "LED_interface.h"

/*Do not forget to change your pin configuration to OUTPUT in MDIO_config*/

void HLED_voidOn (u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <HLED_voidOn+0x6>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, MDIO_PIN_HIGH);
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	6a 81       	ldd	r22, Y+2	; 0x02
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <HLED_voidOff>:

void HLED_voidOff (u8 Copy_u8Port, u8  Copy_u8Pin)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <HLED_voidOff+0x6>
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, MDIO_PIN_LOW);
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <HLED_voidToggle>:

void HLED_voidToggle (u8 Copy_u8Port, u8  Copy_u8Pin)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	6e 97       	sbiw	r28, 0x1e	; 30
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	8d 8f       	std	Y+29, r24	; 0x1d
    1d08:	6e 8f       	std	Y+30, r22	; 0x1e
	if (MDIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin) == MDIO_PIN_HIGH)
    1d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1d0e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MDIO_u8GetPinValue>
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <HLED_voidToggle+0x26>
    1d16:	78 c0       	rjmp	.+240    	; 0x1e08 <HLED_voidToggle+0x116>
	{
		MDIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, MDIO_PIN_LOW);
    1d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d1a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a8 ec       	ldi	r26, 0xC8	; 200
    1d28:	b2 e4       	ldi	r27, 0x42	; 66
    1d2a:	89 8f       	std	Y+25, r24	; 0x19
    1d2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	69 8d       	ldd	r22, Y+25	; 0x19
    1d34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a ef       	ldi	r20, 0xFA	; 250
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8d 8b       	std	Y+21, r24	; 0x15
    1d4c:	9e 8b       	std	Y+22, r25	; 0x16
    1d4e:	af 8b       	std	Y+23, r26	; 0x17
    1d50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <HLED_voidToggle+0x82>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <HLED_voidToggle+0x100>
	else if (__tmp > 65535)
    1d74:	6d 89       	ldd	r22, Y+21	; 0x15
    1d76:	7e 89       	ldd	r23, Y+22	; 0x16
    1d78:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	4f e7       	ldi	r20, 0x7F	; 127
    1d82:	57 e4       	ldi	r21, 0x47	; 71
    1d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <HLED_voidToggle+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e2       	ldi	r20, 0x20	; 32
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <HLED_voidToggle+0xe2>
    1db6:	88 ec       	ldi	r24, 0xC8	; 200
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9a 8b       	std	Y+18, r25	; 0x12
    1dbc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dbe:	89 89       	ldd	r24, Y+17	; 0x11
    1dc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <HLED_voidToggle+0xd0>
    1dc6:	9a 8b       	std	Y+18, r25	; 0x12
    1dc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	8b 89       	ldd	r24, Y+19	; 0x13
    1dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <HLED_voidToggle+0xc4>
    1ddc:	93 c0       	rjmp	.+294    	; 0x1f04 <HLED_voidToggle+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6d 89       	ldd	r22, Y+21	; 0x15
    1de0:	7e 89       	ldd	r23, Y+22	; 0x16
    1de2:	8f 89       	ldd	r24, Y+23	; 0x17
    1de4:	98 8d       	ldd	r25, Y+24	; 0x18
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9c 8b       	std	Y+20, r25	; 0x14
    1df0:	8b 8b       	std	Y+19, r24	; 0x13
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	98 8b       	std	Y+16, r25	; 0x10
    1df8:	8f 87       	std	Y+15, r24	; 0x0f
    1dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfc:	98 89       	ldd	r25, Y+16	; 0x10
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <HLED_voidToggle+0x10c>
    1e02:	98 8b       	std	Y+16, r25	; 0x10
    1e04:	8f 87       	std	Y+15, r24	; 0x0f
    1e06:	7e c0       	rjmp	.+252    	; 0x1f04 <HLED_voidToggle+0x212>
		_delay_ms(100);
	}
	else if (MDIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin) == MDIO_PIN_LOW)
    1e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e0a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1e0c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MDIO_u8GetPinValue>
    1e10:	88 23       	and	r24, r24
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <HLED_voidToggle+0x124>
    1e14:	77 c0       	rjmp	.+238    	; 0x1f04 <HLED_voidToggle+0x212>
	{
		MDIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, MDIO_PIN_HIGH);
    1e16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e18:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a8 ec       	ldi	r26, 0xC8	; 200
    1e26:	b2 e4       	ldi	r27, 0x42	; 66
    1e28:	8b 87       	std	Y+11, r24	; 0x0b
    1e2a:	9c 87       	std	Y+12, r25	; 0x0c
    1e2c:	ad 87       	std	Y+13, r26	; 0x0d
    1e2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a ef       	ldi	r20, 0xFA	; 250
    1e3e:	54 e4       	ldi	r21, 0x44	; 68
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8f 83       	std	Y+7, r24	; 0x07
    1e4a:	98 87       	std	Y+8, r25	; 0x08
    1e4c:	a9 87       	std	Y+9, r26	; 0x09
    1e4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e50:	6f 81       	ldd	r22, Y+7	; 0x07
    1e52:	78 85       	ldd	r23, Y+8	; 0x08
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <HLED_voidToggle+0x180>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <HLED_voidToggle+0x1fe>
	else if (__tmp > 65535)
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <HLED_voidToggle+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <HLED_voidToggle+0x1e0>
    1eb4:	88 ec       	ldi	r24, 0xC8	; 200
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	8b 83       	std	Y+3, r24	; 0x03
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <HLED_voidToggle+0x1ce>
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <HLED_voidToggle+0x1c2>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <HLED_voidToggle+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <HLED_voidToggle+0x20a>
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
	}
	else { /*DO NOTHING*/ }
}
    1f04:	6e 96       	adiw	r28, 0x1e	; 30
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <HLED_voidBlinking>:

void HLED_voidBlinking (u8 Copy_u8Port, u8  Copy_u8Pin)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	6f 97       	sbiw	r28, 0x1f	; 31
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f2c:	6f 8f       	std	Y+31, r22	; 0x1f
	for (u8 local_u8Iterator = 0; local_u8Iterator < 10; local_u8Iterator++)
    1f2e:	1d 8e       	std	Y+29, r1	; 0x1d
    1f30:	f1 c0       	rjmp	.+482    	; 0x2114 <HLED_voidBlinking+0x1fe>
	{
		MDIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, MDIO_PIN_HIGH);
    1f32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f34:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a8 ec       	ldi	r26, 0xC8	; 200
    1f42:	b2 e4       	ldi	r27, 0x42	; 66
    1f44:	89 8f       	std	Y+25, r24	; 0x19
    1f46:	9a 8f       	std	Y+26, r25	; 0x1a
    1f48:	ab 8f       	std	Y+27, r26	; 0x1b
    1f4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a ef       	ldi	r20, 0xFA	; 250
    1f5a:	54 e4       	ldi	r21, 0x44	; 68
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8d 8b       	std	Y+21, r24	; 0x15
    1f66:	9e 8b       	std	Y+22, r25	; 0x16
    1f68:	af 8b       	std	Y+23, r26	; 0x17
    1f6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f70:	8f 89       	ldd	r24, Y+23	; 0x17
    1f72:	98 8d       	ldd	r25, Y+24	; 0x18
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <HLED_voidBlinking+0x78>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9c 8b       	std	Y+20, r25	; 0x14
    1f8a:	8b 8b       	std	Y+19, r24	; 0x13
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <HLED_voidBlinking+0xf6>
	else if (__tmp > 65535)
    1f8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f90:	7e 89       	ldd	r23, Y+22	; 0x16
    1f92:	8f 89       	ldd	r24, Y+23	; 0x17
    1f94:	98 8d       	ldd	r25, Y+24	; 0x18
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	4c f5       	brge	.+82     	; 0x1ff8 <HLED_voidBlinking+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1faa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <HLED_voidBlinking+0xd8>
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9a 8b       	std	Y+18, r25	; 0x12
    1fd6:	89 8b       	std	Y+17, r24	; 0x11
    1fd8:	89 89       	ldd	r24, Y+17	; 0x11
    1fda:	9a 89       	ldd	r25, Y+18	; 0x12
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <HLED_voidBlinking+0xc6>
    1fe0:	9a 8b       	std	Y+18, r25	; 0x12
    1fe2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9c 8b       	std	Y+20, r25	; 0x14
    1fec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <HLED_voidBlinking+0xba>
    1ff6:	14 c0       	rjmp	.+40     	; 0x2020 <HLED_voidBlinking+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9c 8b       	std	Y+20, r25	; 0x14
    200a:	8b 8b       	std	Y+19, r24	; 0x13
    200c:	8b 89       	ldd	r24, Y+19	; 0x13
    200e:	9c 89       	ldd	r25, Y+20	; 0x14
    2010:	98 8b       	std	Y+16, r25	; 0x10
    2012:	8f 87       	std	Y+15, r24	; 0x0f
    2014:	8f 85       	ldd	r24, Y+15	; 0x0f
    2016:	98 89       	ldd	r25, Y+16	; 0x10
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <HLED_voidBlinking+0x102>
    201c:	98 8b       	std	Y+16, r25	; 0x10
    201e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		MDIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, MDIO_PIN_LOW);
    2020:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2022:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a8 ec       	ldi	r26, 0xC8	; 200
    2030:	b2 e4       	ldi	r27, 0x42	; 66
    2032:	8b 87       	std	Y+11, r24	; 0x0b
    2034:	9c 87       	std	Y+12, r25	; 0x0c
    2036:	ad 87       	std	Y+13, r26	; 0x0d
    2038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6b 85       	ldd	r22, Y+11	; 0x0b
    203c:	7c 85       	ldd	r23, Y+12	; 0x0c
    203e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2040:	9e 85       	ldd	r25, Y+14	; 0x0e
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8f 83       	std	Y+7, r24	; 0x07
    2054:	98 87       	std	Y+8, r25	; 0x08
    2056:	a9 87       	std	Y+9, r26	; 0x09
    2058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <HLED_voidBlinking+0x166>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <HLED_voidBlinking+0x1e4>
	else if (__tmp > 65535)
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <HLED_voidBlinking+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	8d 85       	ldd	r24, Y+13	; 0x0d
    209a:	9e 85       	ldd	r25, Y+14	; 0x0e
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <HLED_voidBlinking+0x1c6>
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	8b 83       	std	Y+3, r24	; 0x03
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <HLED_voidBlinking+0x1b4>
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <HLED_voidBlinking+0x1a8>
    20e4:	14 c0       	rjmp	.+40     	; 0x210e <HLED_voidBlinking+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <HLED_voidBlinking+0x1f0>
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
	else { /*DO NOTHING*/ }
}

void HLED_voidBlinking (u8 Copy_u8Port, u8  Copy_u8Pin)
{
	for (u8 local_u8Iterator = 0; local_u8Iterator < 10; local_u8Iterator++)
    210e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2110:	8f 5f       	subi	r24, 0xFF	; 255
    2112:	8d 8f       	std	Y+29, r24	; 0x1d
    2114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2116:	8a 30       	cpi	r24, 0x0A	; 10
    2118:	08 f4       	brcc	.+2      	; 0x211c <HLED_voidBlinking+0x206>
    211a:	0b cf       	rjmp	.-490    	; 0x1f32 <HLED_voidBlinking+0x1c>
		MDIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, MDIO_PIN_HIGH);
		_delay_ms(100);
		MDIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, MDIO_PIN_LOW);
		_delay_ms(100);
	}
}
    211c:	6f 96       	adiw	r28, 0x1f	; 31
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <HKYP_u8GetPressedKey>:
#include "HKEY_PAD_interface.h"
#include "HKEY_PAD_config.h"


u8 HKYP_u8GetPressedKey(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	64 97       	sbiw	r28, 0x14	; 20
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
	u8 loc_u8PressedKey = HKYP_NOT_PRESSED;
    2142:	8f ef       	ldi	r24, 0xFF	; 255
    2144:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_u8ColsItr, loc_u8RowsItr;

	u8 loc_u8KYPArr[HKYP_ROWS_NOM][HKYP_COLS_NOM] = KYP_ARR;
    2146:	80 e1       	ldi	r24, 0x10	; 16
    2148:	fe 01       	movw	r30, r28
    214a:	34 96       	adiw	r30, 0x04	; 4
    214c:	df 01       	movw	r26, r30
    214e:	98 2f       	mov	r25, r24
    2150:	1d 92       	st	X+, r1
    2152:	9a 95       	dec	r25
    2154:	e9 f7       	brne	.-6      	; 0x2150 <HKYP_u8GetPressedKey+0x22>
    2156:	87 e0       	ldi	r24, 0x07	; 7
    2158:	8c 83       	std	Y+4, r24	; 0x04
    215a:	88 e0       	ldi	r24, 0x08	; 8
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	89 e0       	ldi	r24, 0x09	; 9
    2160:	8e 83       	std	Y+6, r24	; 0x06
    2162:	84 e0       	ldi	r24, 0x04	; 4
    2164:	88 87       	std	Y+8, r24	; 0x08
    2166:	85 e0       	ldi	r24, 0x05	; 5
    2168:	89 87       	std	Y+9, r24	; 0x09
    216a:	86 e0       	ldi	r24, 0x06	; 6
    216c:	8a 87       	std	Y+10, r24	; 0x0a
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	8c 87       	std	Y+12, r24	; 0x0c
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	8d 87       	std	Y+13, r24	; 0x0d
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	8e 87       	std	Y+14, r24	; 0x0e

	for(loc_u8ColsItr = HKYP_COLS_OFFSET; loc_u8ColsItr < (HKYP_COLS_NOM +HKYP_COLS_OFFSET); loc_u8ColsItr++)
    217a:	1a 82       	std	Y+2, r1	; 0x02
    217c:	3a c0       	rjmp	.+116    	; 0x21f2 <HKYP_u8GetPressedKey+0xc4>
	{
		MDIO_voidSetPinValue(HKYP_PORT, loc_u8ColsItr, MDIO_PIN_LOW);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	6a 81       	ldd	r22, Y+2	; 0x02
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>

		for(loc_u8RowsItr = HKYP_ROWS_OFFSET; loc_u8RowsItr < (HKYP_ROWS_NOM + HKYP_ROWS_OFFSET); loc_u8RowsItr++)
    2188:	84 e0       	ldi	r24, 0x04	; 4
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	27 c0       	rjmp	.+78     	; 0x21dc <HKYP_u8GetPressedKey+0xae>
		{

			if (0  == MDIO_u8GetPinValue(HKYP_PORT,loc_u8RowsItr))
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	69 81       	ldd	r22, Y+1	; 0x01
    2192:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MDIO_u8GetPinValue>
    2196:	88 23       	and	r24, r24
    2198:	f1 f4       	brne	.+60     	; 0x21d6 <HKYP_u8GetPressedKey+0xa8>
			{

				while(0  == MDIO_u8GetPinValue(HKYP_PORT,loc_u8RowsItr))
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	69 81       	ldd	r22, Y+1	; 0x01
    219e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MDIO_u8GetPinValue>
    21a2:	88 23       	and	r24, r24
    21a4:	d1 f3       	breq	.-12     	; 0x219a <HKYP_u8GetPressedKey+0x6c>
				{
					/*Wait untill key is released*/
				}

				return loc_u8KYPArr[loc_u8RowsItr - HKYP_ROWS_OFFSET][loc_u8ColsItr- HKYP_COLS_OFFSET];
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 01       	movw	r18, r24
    21ae:	24 50       	subi	r18, 0x04	; 4
    21b0:	30 40       	sbci	r19, 0x00	; 0
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	48 2f       	mov	r20, r24
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	22 0f       	add	r18, r18
    21ba:	33 1f       	adc	r19, r19
    21bc:	22 0f       	add	r18, r18
    21be:	33 1f       	adc	r19, r19
    21c0:	ce 01       	movw	r24, r28
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	82 0f       	add	r24, r18
    21c6:	93 1f       	adc	r25, r19
    21c8:	84 0f       	add	r24, r20
    21ca:	95 1f       	adc	r25, r21
    21cc:	fc 01       	movw	r30, r24
    21ce:	33 96       	adiw	r30, 0x03	; 3
    21d0:	a0 81       	ld	r26, Z
    21d2:	ac 8b       	std	Y+20, r26	; 0x14
    21d4:	13 c0       	rjmp	.+38     	; 0x21fc <HKYP_u8GetPressedKey+0xce>

	for(loc_u8ColsItr = HKYP_COLS_OFFSET; loc_u8ColsItr < (HKYP_COLS_NOM +HKYP_COLS_OFFSET); loc_u8ColsItr++)
	{
		MDIO_voidSetPinValue(HKYP_PORT, loc_u8ColsItr, MDIO_PIN_LOW);

		for(loc_u8RowsItr = HKYP_ROWS_OFFSET; loc_u8RowsItr < (HKYP_ROWS_NOM + HKYP_ROWS_OFFSET); loc_u8RowsItr++)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	88 30       	cpi	r24, 0x08	; 8
    21e0:	b0 f2       	brcs	.-84     	; 0x218e <HKYP_u8GetPressedKey+0x60>
			}


		}

		MDIO_voidSetPinValue(HKYP_PORT, loc_u8ColsItr, MDIO_PIN_HIGH);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	6a 81       	ldd	r22, Y+2	; 0x02
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
	u8 loc_u8PressedKey = HKYP_NOT_PRESSED;
	u8 loc_u8ColsItr, loc_u8RowsItr;

	u8 loc_u8KYPArr[HKYP_ROWS_NOM][HKYP_COLS_NOM] = KYP_ARR;

	for(loc_u8ColsItr = HKYP_COLS_OFFSET; loc_u8ColsItr < (HKYP_COLS_NOM +HKYP_COLS_OFFSET); loc_u8ColsItr++)
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	8a 83       	std	Y+2, r24	; 0x02
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	18 f2       	brcs	.-122    	; 0x217e <HKYP_u8GetPressedKey+0x50>

		MDIO_voidSetPinValue(HKYP_PORT, loc_u8ColsItr, MDIO_PIN_HIGH);
	}


	return loc_u8PressedKey;
    21f8:	bb 81       	ldd	r27, Y+3	; 0x03
    21fa:	bc 8b       	std	Y+20, r27	; 0x14
    21fc:	8c 89       	ldd	r24, Y+20	; 0x14
}
    21fe:	64 96       	adiw	r28, 0x14	; 20
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <HCLCD_voidInit>:
#include "HCLCD_interface.h"

/*Do not forget to change your pin configuration to OUTPUT in MDIO_config*/

void HCLCD_voidInit ()
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	2e 97       	sbiw	r28, 0x0e	; 14
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e2       	ldi	r26, 0x20	; 32
    222a:	b2 e4       	ldi	r27, 0x42	; 66
    222c:	8b 87       	std	Y+11, r24	; 0x0b
    222e:	9c 87       	std	Y+12, r25	; 0x0c
    2230:	ad 87       	std	Y+13, r26	; 0x0d
    2232:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2234:	6b 85       	ldd	r22, Y+11	; 0x0b
    2236:	7c 85       	ldd	r23, Y+12	; 0x0c
    2238:	8d 85       	ldd	r24, Y+13	; 0x0d
    223a:	9e 85       	ldd	r25, Y+14	; 0x0e
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4a ef       	ldi	r20, 0xFA	; 250
    2242:	54 e4       	ldi	r21, 0x44	; 68
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8f 83       	std	Y+7, r24	; 0x07
    224e:	98 87       	std	Y+8, r25	; 0x08
    2250:	a9 87       	std	Y+9, r26	; 0x09
    2252:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	2c f4       	brge	.+10     	; 0x2276 <HCLCD_voidInit+0x66>
		__ticks = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	3f c0       	rjmp	.+126    	; 0x22f4 <HCLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2276:	6f 81       	ldd	r22, Y+7	; 0x07
    2278:	78 85       	ldd	r23, Y+8	; 0x08
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	9a 85       	ldd	r25, Y+10	; 0x0a
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	3f ef       	ldi	r19, 0xFF	; 255
    2282:	4f e7       	ldi	r20, 0x7F	; 127
    2284:	57 e4       	ldi	r21, 0x47	; 71
    2286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228a:	18 16       	cp	r1, r24
    228c:	4c f5       	brge	.+82     	; 0x22e0 <HCLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2290:	7c 85       	ldd	r23, Y+12	; 0x0c
    2292:	8d 85       	ldd	r24, Y+13	; 0x0d
    2294:	9e 85       	ldd	r25, Y+14	; 0x0e
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e2       	ldi	r20, 0x20	; 32
    229c:	51 e4       	ldi	r21, 0x41	; 65
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	0f c0       	rjmp	.+30     	; 0x22d6 <HCLCD_voidInit+0xc6>
    22b8:	88 ec       	ldi	r24, 0xC8	; 200
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <HCLCD_voidInit+0xb4>
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	9e 81       	ldd	r25, Y+6	; 0x06
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d6:	8d 81       	ldd	r24, Y+5	; 0x05
    22d8:	9e 81       	ldd	r25, Y+6	; 0x06
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	69 f7       	brne	.-38     	; 0x22b8 <HCLCD_voidInit+0xa8>
    22de:	14 c0       	rjmp	.+40     	; 0x2308 <HCLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <HCLCD_voidInit+0xf0>
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*Function Set*/
	HCLCD_voidSend_Command (0b00111000); /*Lines : 2 , Fonts : 5x7 */
    2308:	88 e3       	ldi	r24, 0x38	; 56
    230a:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
	/*Display ON/OFF Control*/
	HCLCD_voidSend_Command (0b00001100);
    230e:	8c e0       	ldi	r24, 0x0C	; 12
    2310:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
	/*Display Clear*/
	HCLCD_voidSend_Command (0b00000001);
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
	/*Entry Mode*/
	HCLCD_voidSend_Command (0b00000110);
    231a:	86 e0       	ldi	r24, 0x06	; 6
    231c:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
}
    2320:	2e 96       	adiw	r28, 0x0e	; 14
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <HCLCD_voidSend_Command>:
/*****************************************************************************************************/
void HCLCD_voidSend_Command (u8 Copy_u8CMD)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	2f 97       	sbiw	r28, 0x0f	; 15
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPinValue (HCLCD_CMD_PORT, HCLCD_RS_PIN, MDIO_PIN_LOW);
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	65 e0       	ldi	r22, 0x05	; 5
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue (HCLCD_CMD_PORT, HCLCD_RW_PIN, MDIO_PIN_LOW);
    2352:	83 e0       	ldi	r24, 0x03	; 3
    2354:	66 e0       	ldi	r22, 0x06	; 6
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>

	MDIO_voidSetPortValue(HCLCD_DATA_PORT, Copy_u8CMD);
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2360:	0e 94 83 0b 	call	0x1706	; 0x1706 <MDIO_voidSetPortValue>

	MDIO_voidSetPinValue (HCLCD_CMD_PORT, HCLCD_E_PIN, MDIO_PIN_HIGH);
    2364:	83 e0       	ldi	r24, 0x03	; 3
    2366:	67 e0       	ldi	r22, 0x07	; 7
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e0       	ldi	r26, 0x00	; 0
    2374:	b0 e4       	ldi	r27, 0x40	; 64
    2376:	8b 87       	std	Y+11, r24	; 0x0b
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	ad 87       	std	Y+13, r26	; 0x0d
    237c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a ef       	ldi	r20, 0xFA	; 250
    238c:	54 e4       	ldi	r21, 0x44	; 68
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8f 83       	std	Y+7, r24	; 0x07
    2398:	98 87       	std	Y+8, r25	; 0x08
    239a:	a9 87       	std	Y+9, r26	; 0x09
    239c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <HCLCD_voidSend_Command+0x8e>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	3f c0       	rjmp	.+126    	; 0x243e <HCLCD_voidSend_Command+0x10c>
	else if (__tmp > 65535)
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <HCLCD_voidSend_Command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <HCLCD_voidSend_Command+0xee>
    2402:	88 ec       	ldi	r24, 0xC8	; 200
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <HCLCD_voidSend_Command+0xdc>
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <HCLCD_voidSend_Command+0xd0>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <HCLCD_voidSend_Command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <HCLCD_voidSend_Command+0x118>
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue (HCLCD_CMD_PORT, HCLCD_E_PIN, MDIO_PIN_LOW);
    2452:	83 e0       	ldi	r24, 0x03	; 3
    2454:	67 e0       	ldi	r22, 0x07	; 7
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    245c:	2f 96       	adiw	r28, 0x0f	; 15
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <HCLCD_voidSend_Data>:
/*****************************************************************************************************/
void HCLCD_voidSend_Data (u8 Copy_u8DATA)
{
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	2f 97       	sbiw	r28, 0x0f	; 15
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPinValue (HCLCD_CMD_PORT, HCLCD_RS_PIN, MDIO_PIN_HIGH);
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	65 e0       	ldi	r22, 0x05	; 5
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue (HCLCD_CMD_PORT, HCLCD_RW_PIN, MDIO_PIN_LOW);
    248e:	83 e0       	ldi	r24, 0x03	; 3
    2490:	66 e0       	ldi	r22, 0x06	; 6
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>

	MDIO_voidSetPortValue(HCLCD_DATA_PORT, Copy_u8DATA);
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	6f 85       	ldd	r22, Y+15	; 0x0f
    249c:	0e 94 83 0b 	call	0x1706	; 0x1706 <MDIO_voidSetPortValue>

	MDIO_voidSetPinValue (HCLCD_CMD_PORT, HCLCD_E_PIN, MDIO_PIN_HIGH);
    24a0:	83 e0       	ldi	r24, 0x03	; 3
    24a2:	67 e0       	ldi	r22, 0x07	; 7
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a0 e0       	ldi	r26, 0x00	; 0
    24b0:	b0 e4       	ldi	r27, 0x40	; 64
    24b2:	8b 87       	std	Y+11, r24	; 0x0b
    24b4:	9c 87       	std	Y+12, r25	; 0x0c
    24b6:	ad 87       	std	Y+13, r26	; 0x0d
    24b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    24bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24be:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a ef       	ldi	r20, 0xFA	; 250
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8f 83       	std	Y+7, r24	; 0x07
    24d4:	98 87       	std	Y+8, r25	; 0x08
    24d6:	a9 87       	std	Y+9, r26	; 0x09
    24d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24da:	6f 81       	ldd	r22, Y+7	; 0x07
    24dc:	78 85       	ldd	r23, Y+8	; 0x08
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <HCLCD_voidSend_Data+0x8e>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <HCLCD_voidSend_Data+0x10c>
	else if (__tmp > 65535)
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <HCLCD_voidSend_Data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	9e 85       	ldd	r25, Y+14	; 0x0e
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	0f c0       	rjmp	.+30     	; 0x255c <HCLCD_voidSend_Data+0xee>
    253e:	88 ec       	ldi	r24, 0xC8	; 200
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <HCLCD_voidSend_Data+0xdc>
    254e:	9c 83       	std	Y+4, r25	; 0x04
    2550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <HCLCD_voidSend_Data+0xd0>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <HCLCD_voidSend_Data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	6f 81       	ldd	r22, Y+7	; 0x07
    2568:	78 85       	ldd	r23, Y+8	; 0x08
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	9a 85       	ldd	r25, Y+10	; 0x0a
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <HCLCD_voidSend_Data+0x118>
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue (HCLCD_CMD_PORT, HCLCD_E_PIN, MDIO_PIN_LOW);
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	67 e0       	ldi	r22, 0x07	; 7
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinValue>
}
    2598:	2f 96       	adiw	r28, 0x0f	; 15
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <HCLCD_voidClear>:
/*****************************************************************************************************/
void HCLCD_voidClear ()
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
	HCLCD_voidSend_Command(1);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
}
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <HCLCD_voidDisplay_Char>:
/*****************************************************************************************************/
void HCLCD_voidDisplay_Char (u8 Copy_u8Char)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	0f 92       	push	r0
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_voidSend_Data(Copy_u8Char);
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
}
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <HCLCD_voidDisplay_String>:
/*****************************************************************************************************/
void HCLCD_voidDisplay_String (u8 *Copy_pu8String)
{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <HCLCD_voidDisplay_String+0x6>
    25de:	0f 92       	push	r0
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	9b 83       	std	Y+3, r25	; 0x03
    25e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Iterator = 0;
    25e8:	19 82       	std	Y+1, r1	; 0x01
    25ea:	0e c0       	rjmp	.+28     	; 0x2608 <HCLCD_voidDisplay_String+0x30>
	while(Copy_pu8String[local_u8Iterator] != '\0')
	{
		HCLCD_voidSend_Data(Copy_pu8String[local_u8Iterator]);
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	9b 81       	ldd	r25, Y+3	; 0x03
    25f6:	fc 01       	movw	r30, r24
    25f8:	e2 0f       	add	r30, r18
    25fa:	f3 1f       	adc	r31, r19
    25fc:	80 81       	ld	r24, Z
    25fe:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
		local_u8Iterator ++;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	89 83       	std	Y+1, r24	; 0x01
}
/*****************************************************************************************************/
void HCLCD_voidDisplay_String (u8 *Copy_pu8String)
{
	u8 local_u8Iterator = 0;
	while(Copy_pu8String[local_u8Iterator] != '\0')
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	9b 81       	ldd	r25, Y+3	; 0x03
    2612:	fc 01       	movw	r30, r24
    2614:	e2 0f       	add	r30, r18
    2616:	f3 1f       	adc	r31, r19
    2618:	80 81       	ld	r24, Z
    261a:	88 23       	and	r24, r24
    261c:	39 f7       	brne	.-50     	; 0x25ec <HCLCD_voidDisplay_String+0x14>
	{
		HCLCD_voidSend_Data(Copy_pu8String[local_u8Iterator]);
		local_u8Iterator ++;
	}
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <HCLCD_voidDisplay_Number>:
/*****************************************************************************************************/
void HCLCD_voidDisplay_Number (u8 Copy_u8Num)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	0f 92       	push	r0
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_voidSend_Data(Copy_u8Num + 48);
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	80 5d       	subi	r24, 0xD0	; 208
    263a:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
}
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <HCLCD_voidDisplay_MultiNumber>:
/*****************************************************************************************************/
void HCLCD_voidDisplay_MultiNumber (u32 Copy_u32Num, u8 Copy_u8RowPos, u8 Copy_u8ColPos)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	27 97       	sbiw	r28, 0x07	; 7
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	6a 83       	std	Y+2, r22	; 0x02
    265c:	7b 83       	std	Y+3, r23	; 0x03
    265e:	8c 83       	std	Y+4, r24	; 0x04
    2660:	9d 83       	std	Y+5, r25	; 0x05
    2662:	4e 83       	std	Y+6, r20	; 0x06
    2664:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8Remainder = 0;
    2666:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u32Num == 0)
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	9b 81       	ldd	r25, Y+3	; 0x03
    266c:	ac 81       	ldd	r26, Y+4	; 0x04
    266e:	bd 81       	ldd	r27, Y+5	; 0x05
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	a1 05       	cpc	r26, r1
    2674:	b1 05       	cpc	r27, r1
    2676:	09 f0       	breq	.+2      	; 0x267a <HCLCD_voidDisplay_MultiNumber+0x34>
    2678:	a4 c0       	rjmp	.+328    	; 0x27c2 <HCLCD_voidDisplay_MultiNumber+0x17c>
	{
		HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos);
    267a:	8e 81       	ldd	r24, Y+6	; 0x06
    267c:	6f 81       	ldd	r22, Y+7	; 0x07
    267e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
		HCLCD_voidSend_Data(Copy_u32Num + 48);
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	80 5d       	subi	r24, 0xD0	; 208
    2686:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
    268a:	a4 c0       	rjmp	.+328    	; 0x27d4 <HCLCD_voidDisplay_MultiNumber+0x18e>
	}
	else
	{
		while (Copy_u32Num > 0)
		{
			local_u8Remainder = Copy_u32Num % 10;
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	ac 81       	ldd	r26, Y+4	; 0x04
    2692:	bd 81       	ldd	r27, Y+5	; 0x05
    2694:	2a e0       	ldi	r18, 0x0A	; 10
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__udivmodsi4>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	89 83       	std	Y+1, r24	; 0x01

			if (Copy_u32Num > 99999)
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	ac 81       	ldd	r26, Y+4	; 0x04
    26b0:	bd 81       	ldd	r27, Y+5	; 0x05
    26b2:	80 3a       	cpi	r24, 0xA0	; 160
    26b4:	26 e8       	ldi	r18, 0x86	; 134
    26b6:	92 07       	cpc	r25, r18
    26b8:	21 e0       	ldi	r18, 0x01	; 1
    26ba:	a2 07       	cpc	r26, r18
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	b2 07       	cpc	r27, r18
    26c0:	60 f0       	brcs	.+24     	; 0x26da <HCLCD_voidDisplay_MultiNumber+0x94>
			{
				HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos + 5);
    26c2:	8f 81       	ldd	r24, Y+7	; 0x07
    26c4:	98 2f       	mov	r25, r24
    26c6:	9b 5f       	subi	r25, 0xFB	; 251
    26c8:	8e 81       	ldd	r24, Y+6	; 0x06
    26ca:	69 2f       	mov	r22, r25
    26cc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
				HCLCD_voidSend_Data(local_u8Remainder + 48);
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	80 5d       	subi	r24, 0xD0	; 208
    26d4:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
    26d8:	62 c0       	rjmp	.+196    	; 0x279e <HCLCD_voidDisplay_MultiNumber+0x158>
			}
			else if (Copy_u32Num > 9999)
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	ac 81       	ldd	r26, Y+4	; 0x04
    26e0:	bd 81       	ldd	r27, Y+5	; 0x05
    26e2:	80 31       	cpi	r24, 0x10	; 16
    26e4:	27 e2       	ldi	r18, 0x27	; 39
    26e6:	92 07       	cpc	r25, r18
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	a2 07       	cpc	r26, r18
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	b2 07       	cpc	r27, r18
    26f0:	60 f0       	brcs	.+24     	; 0x270a <HCLCD_voidDisplay_MultiNumber+0xc4>
			{
				HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos + 4);
    26f2:	8f 81       	ldd	r24, Y+7	; 0x07
    26f4:	98 2f       	mov	r25, r24
    26f6:	9c 5f       	subi	r25, 0xFC	; 252
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	69 2f       	mov	r22, r25
    26fc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
				HCLCD_voidSend_Data(local_u8Remainder + 48);
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	80 5d       	subi	r24, 0xD0	; 208
    2704:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
    2708:	4a c0       	rjmp	.+148    	; 0x279e <HCLCD_voidDisplay_MultiNumber+0x158>
			}
			else if (Copy_u32Num > 999)
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	ac 81       	ldd	r26, Y+4	; 0x04
    2710:	bd 81       	ldd	r27, Y+5	; 0x05
    2712:	88 3e       	cpi	r24, 0xE8	; 232
    2714:	23 e0       	ldi	r18, 0x03	; 3
    2716:	92 07       	cpc	r25, r18
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	a2 07       	cpc	r26, r18
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	b2 07       	cpc	r27, r18
    2720:	60 f0       	brcs	.+24     	; 0x273a <HCLCD_voidDisplay_MultiNumber+0xf4>
			{
				HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos + 3);
    2722:	8f 81       	ldd	r24, Y+7	; 0x07
    2724:	98 2f       	mov	r25, r24
    2726:	9d 5f       	subi	r25, 0xFD	; 253
    2728:	8e 81       	ldd	r24, Y+6	; 0x06
    272a:	69 2f       	mov	r22, r25
    272c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
				HCLCD_voidSend_Data(local_u8Remainder + 48);
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	80 5d       	subi	r24, 0xD0	; 208
    2734:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
    2738:	32 c0       	rjmp	.+100    	; 0x279e <HCLCD_voidDisplay_MultiNumber+0x158>
			}
			else if (Copy_u32Num > 99)
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	9b 81       	ldd	r25, Y+3	; 0x03
    273e:	ac 81       	ldd	r26, Y+4	; 0x04
    2740:	bd 81       	ldd	r27, Y+5	; 0x05
    2742:	84 36       	cpi	r24, 0x64	; 100
    2744:	91 05       	cpc	r25, r1
    2746:	a1 05       	cpc	r26, r1
    2748:	b1 05       	cpc	r27, r1
    274a:	60 f0       	brcs	.+24     	; 0x2764 <HCLCD_voidDisplay_MultiNumber+0x11e>
			{
				HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos + 2);
    274c:	8f 81       	ldd	r24, Y+7	; 0x07
    274e:	98 2f       	mov	r25, r24
    2750:	9e 5f       	subi	r25, 0xFE	; 254
    2752:	8e 81       	ldd	r24, Y+6	; 0x06
    2754:	69 2f       	mov	r22, r25
    2756:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
				HCLCD_voidSend_Data(local_u8Remainder + 48);
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	80 5d       	subi	r24, 0xD0	; 208
    275e:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
    2762:	1d c0       	rjmp	.+58     	; 0x279e <HCLCD_voidDisplay_MultiNumber+0x158>
			}
			else if (Copy_u32Num > 9)
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	9b 81       	ldd	r25, Y+3	; 0x03
    2768:	ac 81       	ldd	r26, Y+4	; 0x04
    276a:	bd 81       	ldd	r27, Y+5	; 0x05
    276c:	8a 30       	cpi	r24, 0x0A	; 10
    276e:	91 05       	cpc	r25, r1
    2770:	a1 05       	cpc	r26, r1
    2772:	b1 05       	cpc	r27, r1
    2774:	60 f0       	brcs	.+24     	; 0x278e <HCLCD_voidDisplay_MultiNumber+0x148>
			{
				HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos + 1);
    2776:	8f 81       	ldd	r24, Y+7	; 0x07
    2778:	98 2f       	mov	r25, r24
    277a:	9f 5f       	subi	r25, 0xFF	; 255
    277c:	8e 81       	ldd	r24, Y+6	; 0x06
    277e:	69 2f       	mov	r22, r25
    2780:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
				HCLCD_voidSend_Data(local_u8Remainder + 48);
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	80 5d       	subi	r24, 0xD0	; 208
    2788:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
    278c:	08 c0       	rjmp	.+16     	; 0x279e <HCLCD_voidDisplay_MultiNumber+0x158>
			}
			else if (Copy_u32Num >= 0)
			{
				HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos);
    278e:	8e 81       	ldd	r24, Y+6	; 0x06
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
				HCLCD_voidSend_Data(Copy_u32Num + 48);
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	80 5d       	subi	r24, 0xD0	; 208
    279a:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
			}
			else {/*DO NOTHING*/}

			Copy_u32Num = Copy_u32Num / 10;
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	9b 81       	ldd	r25, Y+3	; 0x03
    27a2:	ac 81       	ldd	r26, Y+4	; 0x04
    27a4:	bd 81       	ldd	r27, Y+5	; 0x05
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__udivmodsi4>
    27b6:	da 01       	movw	r26, r20
    27b8:	c9 01       	movw	r24, r18
    27ba:	8a 83       	std	Y+2, r24	; 0x02
    27bc:	9b 83       	std	Y+3, r25	; 0x03
    27be:	ac 83       	std	Y+4, r26	; 0x04
    27c0:	bd 83       	std	Y+5, r27	; 0x05
		HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos);
		HCLCD_voidSend_Data(Copy_u32Num + 48);
	}
	else
	{
		while (Copy_u32Num > 0)
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	9b 81       	ldd	r25, Y+3	; 0x03
    27c6:	ac 81       	ldd	r26, Y+4	; 0x04
    27c8:	bd 81       	ldd	r27, Y+5	; 0x05
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	a1 05       	cpc	r26, r1
    27ce:	b1 05       	cpc	r27, r1
    27d0:	09 f0       	breq	.+2      	; 0x27d4 <HCLCD_voidDisplay_MultiNumber+0x18e>
    27d2:	5c cf       	rjmp	.-328    	; 0x268c <HCLCD_voidDisplay_MultiNumber+0x46>
			else {/*DO NOTHING*/}

			Copy_u32Num = Copy_u32Num / 10;
		}
	}
}
    27d4:	27 96       	adiw	r28, 0x07	; 7
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <HCLCD_voidGoTo>:
/*****************************************************************************************************/
void HCLCD_voidGoTo (u8 Copy_u8RowPos, u8 Copy_u8ColPos)
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <HCLCD_voidGoTo+0x6>
    27ec:	0f 92       	push	r0
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	8a 83       	std	Y+2, r24	; 0x02
    27f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_CursorPos = 0;
    27f6:	19 82       	std	Y+1, r1	; 0x01
	/*First Row*/
	if (Copy_u8RowPos == 0)
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	88 23       	and	r24, r24
    27fc:	19 f4       	brne	.+6      	; 0x2804 <HCLCD_voidGoTo+0x1e>
	{
		/*Address of first character is 0x0*/
		local_CursorPos = 0x0 + Copy_u8ColPos;
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	06 c0       	rjmp	.+12     	; 0x2810 <HCLCD_voidGoTo+0x2a>
	}
	/*Second Row*/
	else if (Copy_u8RowPos == 1)
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	19 f4       	brne	.+6      	; 0x2810 <HCLCD_voidGoTo+0x2a>
	{
		/*Address of first character is 0x40*/
		local_CursorPos = 0x40 + Copy_u8ColPos;
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	80 5c       	subi	r24, 0xC0	; 192
    280e:	89 83       	std	Y+1, r24	; 0x01
	}
	else { /*DO NOTHING*/ }

	HCLCD_voidSend_Command(local_CursorPos + 128);
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	80 58       	subi	r24, 0x80	; 128
    2814:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
}
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <HCLCD_voidBlinkCursor>:
/*****************************************************************************************************/
void HCLCD_voidBlinkCursor ()
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
	HCLCD_voidSend_Command(0b00001111);
    282c:	8f e0       	ldi	r24, 0x0F	; 15
    282e:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
}
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <HCLCD_voidShift_Right>:
/*****************************************************************************************************/
void HCLCD_voidShift_Right ()
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
	HCLCD_voidSend_Command(0b00011100);
    2840:	8c e1       	ldi	r24, 0x1C	; 28
    2842:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
}
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <HCLCD_voidShift_Left>:
/*****************************************************************************************************/
void HCLCD_voidShift_Left ()
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
	HCLCD_voidSend_Command(0b00011000);
    2854:	88 e1       	ldi	r24, 0x18	; 24
    2856:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>
}
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <HCLCD_voidSpecial_Char>:
/*****************************************************************************************************/
/*Write & Display*/
void HCLCD_voidSpecial_Char (u8 Copy_u8SpCharlocation, u8 *Copy_pu8SpCharArr, u8 Copy_u8RowPos, u8 Copy_u8ColPos)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	27 97       	sbiw	r28, 0x07	; 7
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	8b 83       	std	Y+3, r24	; 0x03
    2876:	7d 83       	std	Y+5, r23	; 0x05
    2878:	6c 83       	std	Y+4, r22	; 0x04
    287a:	4e 83       	std	Y+6, r20	; 0x06
    287c:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8Lines = 0;
    287e:	1a 82       	std	Y+2, r1	; 0x02

	local_u8Lines = Copy_u8SpCharlocation * 8;
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	8a 83       	std	Y+2, r24	; 0x02

	HCLCD_voidSend_Command(local_u8Lines + 64);
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	80 5c       	subi	r24, 0xC0	; 192
    2898:	0e 94 99 11 	call	0x2332	; 0x2332 <HCLCD_voidSend_Command>

	for (u8 local_u8Iteration = 0; local_u8Iteration < 8; local_u8Iteration ++)
    289c:	19 82       	std	Y+1, r1	; 0x01
    289e:	0e c0       	rjmp	.+28     	; 0x28bc <HCLCD_voidSpecial_Char+0x5c>
	{
		HCLCD_voidSend_Data(Copy_pu8SpCharArr[local_u8Iteration]);
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	8c 81       	ldd	r24, Y+4	; 0x04
    28a8:	9d 81       	ldd	r25, Y+5	; 0x05
    28aa:	fc 01       	movw	r30, r24
    28ac:	e2 0f       	add	r30, r18
    28ae:	f3 1f       	adc	r31, r19
    28b0:	80 81       	ld	r24, Z
    28b2:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>

	local_u8Lines = Copy_u8SpCharlocation * 8;

	HCLCD_voidSend_Command(local_u8Lines + 64);

	for (u8 local_u8Iteration = 0; local_u8Iteration < 8; local_u8Iteration ++)
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	88 30       	cpi	r24, 0x08	; 8
    28c0:	78 f3       	brcs	.-34     	; 0x28a0 <HCLCD_voidSpecial_Char+0x40>
	{
		HCLCD_voidSend_Data(Copy_pu8SpCharArr[local_u8Iteration]);
	}

	HCLCD_voidGoTo(Copy_u8RowPos, Copy_u8ColPos);
    28c2:	8e 81       	ldd	r24, Y+6	; 0x06
    28c4:	6f 81       	ldd	r22, Y+7	; 0x07
    28c6:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>

	HCLCD_voidSend_Data(Copy_u8SpCharlocation);
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	0e 94 37 12 	call	0x246e	; 0x246e <HCLCD_voidSend_Data>
}
    28d0:	27 96       	adiw	r28, 0x07	; 7
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <main>:
#include "HAL/HSEVEN_SEGMENT/HSEVEN_SEGMENT_interface.h"

#include <util/delay.h>

int main (void)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	62 97       	sbiw	r28, 0x12	; 18
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit()  ;
    28f6:	0e 94 17 08 	call	0x102e	; 0x102e <MDIO_voidInit>

	HCLCD_voidInit() ;
    28fa:	0e 94 08 11 	call	0x2210	; 0x2210 <HCLCD_voidInit>

	MADC_voidInit();
    28fe:	0e 94 0b 0c 	call	0x1816	; 0x1816 <MADC_voidInit>

	MUART_voidInit();
    2902:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MUART_voidInit>

	u8 local_u8Garage_State = 0;
    2906:	1a 8a       	std	Y+18, r1	; 0x12
	//	u8 local_u8Led_Num ;
	u8 local_u8Global_Mode ;
	//	u8 local_u8Light_Intensity;

	u8 local_u8ADC_Value = 0;
    2908:	18 8a       	std	Y+16, r1	; 0x10

	u8 local_u8Temp_Value = 0;
    290a:	1f 86       	std	Y+15, r1	; 0x0f

	while(1)
	{
			local_u8Garage_State = MUART_u8GetChar ();
    290c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <MUART_u8GetChar>
    2910:	8a 8b       	std	Y+18, r24	; 0x12

			HCLCD_voidGoTo(HCLCD_ROW1, HCLCD_Column1) ;
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
			HCLCD_voidDisplay_String("DOOR ST:") ;
    291a:	80 e6       	ldi	r24, 0x60	; 96
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <HCLCD_voidDisplay_String>
    2922:	0b c0       	rjmp	.+22     	; 0x293a <main+0x58>

			while (local_u8Garage_State == 1)
			{
				HCLCD_voidGoTo(HCLCD_ROW1, HCLCD_Column10);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	69 e0       	ldi	r22, 0x09	; 9
    2928:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
				HCLCD_voidDisplay_String("OPENED");
    292c:	89 e6       	ldi	r24, 0x69	; 105
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <HCLCD_voidDisplay_String>
				local_u8Garage_State = MUART_u8GetChar();
    2934:	0e 94 62 06 	call	0xcc4	; 0xcc4 <MUART_u8GetChar>
    2938:	8a 8b       	std	Y+18, r24	; 0x12
			local_u8Garage_State = MUART_u8GetChar ();

			HCLCD_voidGoTo(HCLCD_ROW1, HCLCD_Column1) ;
			HCLCD_voidDisplay_String("DOOR ST:") ;

			while (local_u8Garage_State == 1)
    293a:	8a 89       	ldd	r24, Y+18	; 0x12
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	91 f3       	breq	.-28     	; 0x2924 <main+0x42>
				HCLCD_voidGoTo(HCLCD_ROW1, HCLCD_Column10);
				HCLCD_voidDisplay_String("OPENED");
				local_u8Garage_State = MUART_u8GetChar();
			}

			HCLCD_voidGoTo(HCLCD_ROW1, HCLCD_Column10);
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	69 e0       	ldi	r22, 0x09	; 9
    2944:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <HCLCD_voidGoTo>
			HCLCD_voidDisplay_String("CLOSED");
    2948:	80 e7       	ldi	r24, 0x70	; 112
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <HCLCD_voidDisplay_String>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	aa ef       	ldi	r26, 0xFA	; 250
    2956:	b4 e4       	ldi	r27, 0x44	; 68
    2958:	8b 87       	std	Y+11, r24	; 0x0b
    295a:	9c 87       	std	Y+12, r25	; 0x0c
    295c:	ad 87       	std	Y+13, r26	; 0x0d
    295e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	6b 85       	ldd	r22, Y+11	; 0x0b
    2962:	7c 85       	ldd	r23, Y+12	; 0x0c
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a ef       	ldi	r20, 0xFA	; 250
    296e:	54 e4       	ldi	r21, 0x44	; 68
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8f 83       	std	Y+7, r24	; 0x07
    297a:	98 87       	std	Y+8, r25	; 0x08
    297c:	a9 87       	std	Y+9, r26	; 0x09
    297e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2980:	6f 81       	ldd	r22, Y+7	; 0x07
    2982:	78 85       	ldd	r23, Y+8	; 0x08
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <main+0xc0>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	8d 83       	std	Y+5, r24	; 0x05
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <main+0x13e>
	else if (__tmp > 65535)
    29a2:	6f 81       	ldd	r22, Y+7	; 0x07
    29a4:	78 85       	ldd	r23, Y+8	; 0x08
    29a6:	89 85       	ldd	r24, Y+9	; 0x09
    29a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <main+0x120>
    29e4:	88 ec       	ldi	r24, 0xC8	; 200
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <main+0x10e>
    29f4:	9c 83       	std	Y+4, r25	; 0x04
    29f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <main+0x102>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9e 83       	std	Y+6, r25	; 0x06
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <main+0x14a>
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			HCLCD_voidClear();
    2a34:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HCLCD_voidClear>

		local_u8ADC_Value = MADC_u8ReadChannel(ADC_Channel_0);
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	0e 94 43 0c 	call	0x1886	; 0x1886 <MADC_u8ReadChannel>
    2a3e:	88 8b       	std	Y+16, r24	; 0x10

		local_u8Temp_Value = local_u8ADC_Value * 2;
    2a40:	88 89       	ldd	r24, Y+16	; 0x10
    2a42:	88 2f       	mov	r24, r24
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	8f 87       	std	Y+15, r24	; 0x0f

		ASYSTEM_voidTemp(local_u8Temp_Value);
    2a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a4e:	88 2f       	mov	r24, r24
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <ASYSTEM_voidTemp>
    2a56:	5a cf       	rjmp	.-332    	; 0x290c <main+0x2a>

00002a58 <ASYSTEM_voidTemp>:
//	_delay_ms(2000);
//	HCLCD_voidClear();
//}

void ASYSTEM_voidTemp (u8 Copy_u8Temp)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	0f 92       	push	r0
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_voidDisplay_MultiNumber(Copy_u8Temp, HCLCD_ROW2, HCLCD_Column1);
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	88 2f       	mov	r24, r24
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a0 e0       	ldi	r26, 0x00	; 0
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	0e 94 23 13 	call	0x2646	; 0x2646 <HCLCD_voidDisplay_MultiNumber>
	HCLCD_voidDisplay_String("  ");
    2a7a:	87 e7       	ldi	r24, 0x77	; 119
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <HCLCD_voidDisplay_String>
	if (Copy_u8Temp >= 0 || Copy_u8Temp < 10)
	{
		if (Copy_u8Temp == 0)
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	88 23       	and	r24, r24
    2a86:	39 f4       	brne	.+14     	; 0x2a96 <ASYSTEM_voidTemp+0x3e>
		{
			HSEVEN_SEGMENT_voidNum0(MDIO_PORTA);
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <HSEVEN_SEGMENT_voidNum0>
			HSEVEN_SEGMENT_voidNum0(MDIO_PORTB);
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <HSEVEN_SEGMENT_voidNum0>
    2a94:	59 c0       	rjmp	.+178    	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 2)
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	82 30       	cpi	r24, 0x02	; 2
    2a9a:	39 f4       	brne	.+14     	; 0x2aaa <ASYSTEM_voidTemp+0x52>
		{
			HSEVEN_SEGMENT_voidNum0(MDIO_PORTA);
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <HSEVEN_SEGMENT_voidNum0>
			HSEVEN_SEGMENT_voidNum2(MDIO_PORTB);
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <HSEVEN_SEGMENT_voidNum2>
    2aa8:	4f c0       	rjmp	.+158    	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 4)
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	84 30       	cpi	r24, 0x04	; 4
    2aae:	39 f4       	brne	.+14     	; 0x2abe <ASYSTEM_voidTemp+0x66>
		{
			HSEVEN_SEGMENT_voidNum0(MDIO_PORTA);
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <HSEVEN_SEGMENT_voidNum0>
			HSEVEN_SEGMENT_voidNum4(MDIO_PORTB);
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <HSEVEN_SEGMENT_voidNum4>
    2abc:	45 c0       	rjmp	.+138    	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 6)
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	86 30       	cpi	r24, 0x06	; 6
    2ac2:	39 f4       	brne	.+14     	; 0x2ad2 <ASYSTEM_voidTemp+0x7a>
		{
			HSEVEN_SEGMENT_voidNum0(MDIO_PORTA);
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <HSEVEN_SEGMENT_voidNum0>
			HSEVEN_SEGMENT_voidNum6(MDIO_PORTB);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <HSEVEN_SEGMENT_voidNum6>
    2ad0:	3b c0       	rjmp	.+118    	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 8)
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	88 30       	cpi	r24, 0x08	; 8
    2ad6:	39 f4       	brne	.+14     	; 0x2ae6 <ASYSTEM_voidTemp+0x8e>
		{
			HSEVEN_SEGMENT_voidNum0(MDIO_PORTA);
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <HSEVEN_SEGMENT_voidNum0>
			HSEVEN_SEGMENT_voidNum8(MDIO_PORTB);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <HSEVEN_SEGMENT_voidNum8>
    2ae4:	31 c0       	rjmp	.+98     	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 10)
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	8a 30       	cpi	r24, 0x0A	; 10
    2aea:	39 f4       	brne	.+14     	; 0x2afa <ASYSTEM_voidTemp+0xa2>
		{
			HSEVEN_SEGMENT_voidNum1(MDIO_PORTA);
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	0e 94 ac 0c 	call	0x1958	; 0x1958 <HSEVEN_SEGMENT_voidNum1>
			HSEVEN_SEGMENT_voidNum0(MDIO_PORTB);
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <HSEVEN_SEGMENT_voidNum0>
    2af8:	27 c0       	rjmp	.+78     	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 12)
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	8c 30       	cpi	r24, 0x0C	; 12
    2afe:	39 f4       	brne	.+14     	; 0x2b0e <ASYSTEM_voidTemp+0xb6>
		{
			HSEVEN_SEGMENT_voidNum1(MDIO_PORTA);
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	0e 94 ac 0c 	call	0x1958	; 0x1958 <HSEVEN_SEGMENT_voidNum1>
			HSEVEN_SEGMENT_voidNum2(MDIO_PORTB);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <HSEVEN_SEGMENT_voidNum2>
    2b0c:	1d c0       	rjmp	.+58     	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 14)
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	8e 30       	cpi	r24, 0x0E	; 14
    2b12:	39 f4       	brne	.+14     	; 0x2b22 <ASYSTEM_voidTemp+0xca>
		{
			HSEVEN_SEGMENT_voidNum1(MDIO_PORTA);
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	0e 94 ac 0c 	call	0x1958	; 0x1958 <HSEVEN_SEGMENT_voidNum1>
			HSEVEN_SEGMENT_voidNum4(MDIO_PORTB);
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <HSEVEN_SEGMENT_voidNum4>
    2b20:	13 c0       	rjmp	.+38     	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 16)
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	80 31       	cpi	r24, 0x10	; 16
    2b26:	39 f4       	brne	.+14     	; 0x2b36 <ASYSTEM_voidTemp+0xde>
		{
			HSEVEN_SEGMENT_voidNum1(MDIO_PORTA);
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <HSEVEN_SEGMENT_voidNum1>
			HSEVEN_SEGMENT_voidNum6(MDIO_PORTB);
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <HSEVEN_SEGMENT_voidNum6>
    2b34:	09 c0       	rjmp	.+18     	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		}
		else if (Copy_u8Temp == 18)
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	82 31       	cpi	r24, 0x12	; 18
    2b3a:	31 f4       	brne	.+12     	; 0x2b48 <ASYSTEM_voidTemp+0xf0>
		{
			HSEVEN_SEGMENT_voidNum1(MDIO_PORTA);
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <HSEVEN_SEGMENT_voidNum1>
			HSEVEN_SEGMENT_voidNum8(MDIO_PORTB);
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <HSEVEN_SEGMENT_voidNum8>
		}
	}
}
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <__udivmodsi4>:
    2b50:	a1 e2       	ldi	r26, 0x21	; 33
    2b52:	1a 2e       	mov	r1, r26
    2b54:	aa 1b       	sub	r26, r26
    2b56:	bb 1b       	sub	r27, r27
    2b58:	fd 01       	movw	r30, r26
    2b5a:	0d c0       	rjmp	.+26     	; 0x2b76 <__udivmodsi4_ep>

00002b5c <__udivmodsi4_loop>:
    2b5c:	aa 1f       	adc	r26, r26
    2b5e:	bb 1f       	adc	r27, r27
    2b60:	ee 1f       	adc	r30, r30
    2b62:	ff 1f       	adc	r31, r31
    2b64:	a2 17       	cp	r26, r18
    2b66:	b3 07       	cpc	r27, r19
    2b68:	e4 07       	cpc	r30, r20
    2b6a:	f5 07       	cpc	r31, r21
    2b6c:	20 f0       	brcs	.+8      	; 0x2b76 <__udivmodsi4_ep>
    2b6e:	a2 1b       	sub	r26, r18
    2b70:	b3 0b       	sbc	r27, r19
    2b72:	e4 0b       	sbc	r30, r20
    2b74:	f5 0b       	sbc	r31, r21

00002b76 <__udivmodsi4_ep>:
    2b76:	66 1f       	adc	r22, r22
    2b78:	77 1f       	adc	r23, r23
    2b7a:	88 1f       	adc	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	1a 94       	dec	r1
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <__udivmodsi4_loop>
    2b82:	60 95       	com	r22
    2b84:	70 95       	com	r23
    2b86:	80 95       	com	r24
    2b88:	90 95       	com	r25
    2b8a:	9b 01       	movw	r18, r22
    2b8c:	ac 01       	movw	r20, r24
    2b8e:	bd 01       	movw	r22, r26
    2b90:	cf 01       	movw	r24, r30
    2b92:	08 95       	ret

00002b94 <__prologue_saves__>:
    2b94:	2f 92       	push	r2
    2b96:	3f 92       	push	r3
    2b98:	4f 92       	push	r4
    2b9a:	5f 92       	push	r5
    2b9c:	6f 92       	push	r6
    2b9e:	7f 92       	push	r7
    2ba0:	8f 92       	push	r8
    2ba2:	9f 92       	push	r9
    2ba4:	af 92       	push	r10
    2ba6:	bf 92       	push	r11
    2ba8:	cf 92       	push	r12
    2baa:	df 92       	push	r13
    2bac:	ef 92       	push	r14
    2bae:	ff 92       	push	r15
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	ca 1b       	sub	r28, r26
    2bbe:	db 0b       	sbc	r29, r27
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	09 94       	ijmp

00002bcc <__epilogue_restores__>:
    2bcc:	2a 88       	ldd	r2, Y+18	; 0x12
    2bce:	39 88       	ldd	r3, Y+17	; 0x11
    2bd0:	48 88       	ldd	r4, Y+16	; 0x10
    2bd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bda:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bde:	b9 84       	ldd	r11, Y+9	; 0x09
    2be0:	c8 84       	ldd	r12, Y+8	; 0x08
    2be2:	df 80       	ldd	r13, Y+7	; 0x07
    2be4:	ee 80       	ldd	r14, Y+6	; 0x06
    2be6:	fd 80       	ldd	r15, Y+5	; 0x05
    2be8:	0c 81       	ldd	r16, Y+4	; 0x04
    2bea:	1b 81       	ldd	r17, Y+3	; 0x03
    2bec:	aa 81       	ldd	r26, Y+2	; 0x02
    2bee:	b9 81       	ldd	r27, Y+1	; 0x01
    2bf0:	ce 0f       	add	r28, r30
    2bf2:	d1 1d       	adc	r29, r1
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	ed 01       	movw	r28, r26
    2c00:	08 95       	ret

00002c02 <_exit>:
    2c02:	f8 94       	cli

00002c04 <__stop_program>:
    2c04:	ff cf       	rjmp	.-2      	; 0x2c04 <__stop_program>
